
cleantest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002f48  08002f48  00012f48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000023c  2000000c  08002f8c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000248  08002f8c  00020248  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013e17  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ba1  00000000  00000000  00033e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009c48  00000000  00000000  000369f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c68  00000000  00000000  00040640  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010d0  00000000  00000000  000412a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007607  00000000  00000000  00042378  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004724  00000000  00000000  0004997f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004e0a3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002644  00000000  00000000  0004e120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f30 	.word	0x08002f30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002f30 	.word	0x08002f30

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f9f2 	bl	80008e8 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f9a6 	bl	8000864 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f977 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f002 fa14 	bl	8002984 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf1c      	itt	ne
 8000594:	4b05      	ldrne	r3, [pc, #20]	; (80005ac <HAL_Delay+0x24>)
 8000596:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800059a:	bf18      	it	ne
 800059c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffed 	bl	800057c <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	4284      	cmp	r4, r0
 80005a6:	d8fa      	bhi.n	800059e <HAL_Delay+0x16>
  {
  }
}
 80005a8:	bd38      	pop	{r3, r4, r5, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005b0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b2:	4604      	mov	r4, r0
 80005b4:	2800      	cmp	r0, #0
 80005b6:	f000 809b 	beq.w	80006f0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005ba:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005bc:	b925      	cbnz	r5, 80005c8 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005be:	f002 f837 	bl	8002630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005c2:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005c4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ca:	06db      	lsls	r3, r3, #27
 80005cc:	f100 808e 	bmi.w	80006ec <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005d6:	f023 0302 	bic.w	r3, r3, #2
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005e0:	4b44      	ldr	r3, [pc, #272]	; (80006f4 <HAL_ADC_Init+0x144>)
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005e8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	6861      	ldr	r1, [r4, #4]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005f2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005f4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005fe:	685a      	ldr	r2, [r3, #4]
 8000600:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000606:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000608:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800060a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800060e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	430a      	orrs	r2, r1
 8000614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000616:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000618:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800061a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800061e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000620:	689a      	ldr	r2, [r3, #8]
 8000622:	430a      	orrs	r2, r1
 8000624:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000626:	4934      	ldr	r1, [pc, #208]	; (80006f8 <HAL_ADC_Init+0x148>)
 8000628:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800062a:	428a      	cmp	r2, r1
 800062c:	d052      	beq.n	80006d4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800062e:	6899      	ldr	r1, [r3, #8]
 8000630:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000634:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000636:	6899      	ldr	r1, [r3, #8]
 8000638:	430a      	orrs	r2, r1
 800063a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800063c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800063e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800064a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800064c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800064e:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000650:	f022 0202 	bic.w	r2, r2, #2
 8000654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800065c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800065e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000662:	2a00      	cmp	r2, #0
 8000664:	d03e      	beq.n	80006e4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000666:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000668:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800066a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800066e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	3901      	subs	r1, #1
 800067c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000680:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000684:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000686:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800068a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800068c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068e:	3901      	subs	r1, #1
 8000690:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000696:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000698:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800069c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006a2:	689a      	ldr	r2, [r3, #8]
 80006a4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006a8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006aa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006ac:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006b6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006bc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006be:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006c2:	f023 0303 	bic.w	r3, r3, #3
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006cc:	2300      	movs	r3, #0
 80006ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006d2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006e2:	e7b2      	b.n	800064a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006e4:	685a      	ldr	r2, [r3, #4]
 80006e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ea:	e7c9      	b.n	8000680 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006ec:	2001      	movs	r0, #1
 80006ee:	e7ed      	b.n	80006cc <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006f0:	2001      	movs	r0, #1
}
 80006f2:	bd38      	pop	{r3, r4, r5, pc}
 80006f4:	40012300 	.word	0x40012300
 80006f8:	0f000001 	.word	0x0f000001

080006fc <HAL_ADC_ConfigChannel>:
{
 80006fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80006fe:	2300      	movs	r3, #0
 8000700:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000702:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000706:	2b01      	cmp	r3, #1
 8000708:	d06e      	beq.n	80007e8 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800070a:	680d      	ldr	r5, [r1, #0]
 800070c:	6804      	ldr	r4, [r0, #0]
 800070e:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000710:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000712:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000714:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000718:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800071a:	d92a      	bls.n	8000772 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800071c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000720:	68e7      	ldr	r7, [r4, #12]
 8000722:	3b1e      	subs	r3, #30
 8000724:	f04f 0e07 	mov.w	lr, #7
 8000728:	fa0e fe03 	lsl.w	lr, lr, r3
 800072c:	ea27 070e 	bic.w	r7, r7, lr
 8000730:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000732:	68e7      	ldr	r7, [r4, #12]
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	433b      	orrs	r3, r7
 800073a:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800073c:	684a      	ldr	r2, [r1, #4]
 800073e:	2a06      	cmp	r2, #6
 8000740:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000744:	d825      	bhi.n	8000792 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000746:	4413      	add	r3, r2
 8000748:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800074a:	1f59      	subs	r1, r3, #5
 800074c:	231f      	movs	r3, #31
 800074e:	408b      	lsls	r3, r1
 8000750:	ea27 0303 	bic.w	r3, r7, r3
 8000754:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000756:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000758:	fa06 f101 	lsl.w	r1, r6, r1
 800075c:	4311      	orrs	r1, r2
 800075e:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000760:	4b32      	ldr	r3, [pc, #200]	; (800082c <HAL_ADC_ConfigChannel+0x130>)
 8000762:	429c      	cmp	r4, r3
 8000764:	d034      	beq.n	80007d0 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000766:	2300      	movs	r3, #0
 8000768:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800076c:	4618      	mov	r0, r3
}
 800076e:	b003      	add	sp, #12
 8000770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000772:	6927      	ldr	r7, [r4, #16]
 8000774:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000778:	f04f 0e07 	mov.w	lr, #7
 800077c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000780:	ea27 070e 	bic.w	r7, r7, lr
 8000784:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000786:	6927      	ldr	r7, [r4, #16]
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	433b      	orrs	r3, r7
 800078e:	6123      	str	r3, [r4, #16]
 8000790:	e7d4      	b.n	800073c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000792:	2a0c      	cmp	r2, #12
 8000794:	d80e      	bhi.n	80007b4 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000796:	4413      	add	r3, r2
 8000798:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800079a:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800079e:	231f      	movs	r3, #31
 80007a0:	4093      	lsls	r3, r2
 80007a2:	ea21 0303 	bic.w	r3, r1, r3
 80007a6:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007aa:	fa06 f202 	lsl.w	r2, r6, r2
 80007ae:	431a      	orrs	r2, r3
 80007b0:	6322      	str	r2, [r4, #48]	; 0x30
 80007b2:	e7d5      	b.n	8000760 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007b4:	4413      	add	r3, r2
 80007b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007b8:	3b41      	subs	r3, #65	; 0x41
 80007ba:	221f      	movs	r2, #31
 80007bc:	409a      	lsls	r2, r3
 80007be:	ea21 0202 	bic.w	r2, r1, r2
 80007c2:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007c6:	fa06 f103 	lsl.w	r1, r6, r3
 80007ca:	4311      	orrs	r1, r2
 80007cc:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007ce:	e7c7      	b.n	8000760 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007d0:	2d12      	cmp	r5, #18
 80007d2:	d10b      	bne.n	80007ec <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <HAL_ADC_ConfigChannel+0x134>)
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80007dc:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	e7be      	b.n	8000766 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80007e8:	2002      	movs	r0, #2
 80007ea:	e7c0      	b.n	800076e <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_ADC_ConfigChannel+0x138>)
 80007ee:	429d      	cmp	r5, r3
 80007f0:	d001      	beq.n	80007f6 <HAL_ADC_ConfigChannel+0xfa>
 80007f2:	2d11      	cmp	r5, #17
 80007f4:	d1b7      	bne.n	8000766 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_ADC_ConfigChannel+0x134>)
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80007fe:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000806:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_ADC_ConfigChannel+0x138>)
 800080a:	429d      	cmp	r5, r3
 800080c:	d1ab      	bne.n	8000766 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_ADC_ConfigChannel+0x13c>)
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_ADC_ConfigChannel+0x140>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	fbb3 f2f2 	udiv	r2, r3, r2
 8000818:	230a      	movs	r3, #10
 800081a:	4353      	muls	r3, r2
        counter--;
 800081c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800081e:	9b01      	ldr	r3, [sp, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0a0      	beq.n	8000766 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000824:	9b01      	ldr	r3, [sp, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	e7f8      	b.n	800081c <HAL_ADC_ConfigChannel+0x120>
 800082a:	bf00      	nop
 800082c:	40012000 	.word	0x40012000
 8000830:	40012300 	.word	0x40012300
 8000834:	10000012 	.word	0x10000012
 8000838:	20000008 	.word	0x20000008
 800083c:	000f4240 	.word	0x000f4240

08000840 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000842:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000844:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000850:	0200      	lsls	r0, r0, #8
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800085a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800085c:	60d3      	str	r3, [r2, #12]
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000866:	b530      	push	{r4, r5, lr}
 8000868:	68dc      	ldr	r4, [r3, #12]
 800086a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	2b04      	cmp	r3, #4
 8000876:	bf28      	it	cs
 8000878:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 0501 	mov.w	r5, #1
 8000880:	fa05 f303 	lsl.w	r3, r5, r3
 8000884:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000888:	bf8c      	ite	hi
 800088a:	3c03      	subhi	r4, #3
 800088c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088e:	4019      	ands	r1, r3
 8000890:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000892:	fa05 f404 	lsl.w	r4, r5, r4
 8000896:	3c01      	subs	r4, #1
 8000898:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800089a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	ea42 0201 	orr.w	r2, r2, r1
 80008a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	bfad      	iteet	ge
 80008a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	f000 000f 	andlt.w	r0, r0, #15
 80008ae:	4b06      	ldrlt	r3, [pc, #24]	; (80008c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	bfb5      	itete	lt
 80008b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80008c0:	bd30      	pop	{r4, r5, pc}
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	e000ed14 	.word	0xe000ed14

080008cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008cc:	2800      	cmp	r0, #0
 80008ce:	db08      	blt.n	80008e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d0:	0942      	lsrs	r2, r0, #5
 80008d2:	2301      	movs	r3, #1
 80008d4:	f000 001f 	and.w	r0, r0, #31
 80008d8:	fa03 f000 	lsl.w	r0, r3, r0
 80008dc:	4b01      	ldr	r3, [pc, #4]	; (80008e4 <HAL_NVIC_EnableIRQ+0x18>)
 80008de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	3801      	subs	r0, #1
 80008ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ee:	d20a      	bcs.n	8000906 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	21f0      	movs	r1, #240	; 0xf0
 80008f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000914:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000918:	2b02      	cmp	r3, #2
 800091a:	d003      	beq.n	8000924 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000920:	2001      	movs	r0, #1
 8000922:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000924:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000926:	2305      	movs	r3, #5
 8000928:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800092c:	6813      	ldr	r3, [r2, #0]
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000934:	2000      	movs	r0, #0
}
 8000936:	4770      	bx	lr

08000938 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8000938:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800093c:	4770      	bx	lr
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000944:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000946:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000948:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000ad8 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800094c:	4a60      	ldr	r2, [pc, #384]	; (8000ad0 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000950:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000954:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000956:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000958:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800095e:	42ac      	cmp	r4, r5
 8000960:	f040 80a6 	bne.w	8000ab0 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000964:	684c      	ldr	r4, [r1, #4]
 8000966:	f024 0c10 	bic.w	ip, r4, #16
 800096a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800096e:	2e01      	cmp	r6, #1
 8000970:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000974:	d812      	bhi.n	800099c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000976:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000978:	2603      	movs	r6, #3
 800097a:	fa06 f60e 	lsl.w	r6, r6, lr
 800097e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000982:	68ce      	ldr	r6, [r1, #12]
 8000984:	fa06 f60e 	lsl.w	r6, r6, lr
 8000988:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800098a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800098c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800098e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000992:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000996:	409e      	lsls	r6, r3
 8000998:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800099a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800099c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800099e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009a0:	fa06 f60e 	lsl.w	r6, r6, lr
 80009a4:	43f6      	mvns	r6, r6
 80009a6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009aa:	688f      	ldr	r7, [r1, #8]
 80009ac:	fa07 f70e 	lsl.w	r7, r7, lr
 80009b0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80009b8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ba:	d116      	bne.n	80009ea <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80009bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80009c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80009c8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009d0:	f04f 0c0f 	mov.w	ip, #15
 80009d4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009d8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009dc:	690f      	ldr	r7, [r1, #16]
 80009de:	fa07 f70b 	lsl.w	r7, r7, fp
 80009e2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009e6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80009ea:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ec:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ee:	f004 0703 	and.w	r7, r4, #3
 80009f2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80009f6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80009fa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fc:	00e6      	lsls	r6, r4, #3
 80009fe:	d557      	bpl.n	8000ab0 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a00:	f04f 0b00 	mov.w	fp, #0
 8000a04:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a08:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a0c:	4e31      	ldr	r6, [pc, #196]	; (8000ad4 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a12:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a16:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a1a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a1e:	9703      	str	r7, [sp, #12]
 8000a20:	9f03      	ldr	r7, [sp, #12]
 8000a22:	f023 0703 	bic.w	r7, r3, #3
 8000a26:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a2a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a2e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a32:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a36:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a3a:	f04f 0e0f 	mov.w	lr, #15
 8000a3e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a42:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a44:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a48:	d039      	beq.n	8000abe <HAL_GPIO_Init+0x17e>
 8000a4a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a4e:	42b0      	cmp	r0, r6
 8000a50:	d037      	beq.n	8000ac2 <HAL_GPIO_Init+0x182>
 8000a52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a56:	42b0      	cmp	r0, r6
 8000a58:	d035      	beq.n	8000ac6 <HAL_GPIO_Init+0x186>
 8000a5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a5e:	42b0      	cmp	r0, r6
 8000a60:	d033      	beq.n	8000aca <HAL_GPIO_Init+0x18a>
 8000a62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a66:	42b0      	cmp	r0, r6
 8000a68:	bf14      	ite	ne
 8000a6a:	2607      	movne	r6, #7
 8000a6c:	2604      	moveq	r6, #4
 8000a6e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a72:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a76:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a78:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a80:	bf0c      	ite	eq
 8000a82:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a84:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000a86:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000a88:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a8a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a8e:	bf0c      	ite	eq
 8000a90:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a92:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000a94:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a96:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a98:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a9c:	bf0c      	ite	eq
 8000a9e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000aa0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000aa2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000aa4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000aa8:	bf54      	ite	pl
 8000aaa:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000aac:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000aae:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	2b10      	cmp	r3, #16
 8000ab4:	f47f af4f 	bne.w	8000956 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ab8:	b005      	add	sp, #20
 8000aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000abe:	465e      	mov	r6, fp
 8000ac0:	e7d5      	b.n	8000a6e <HAL_GPIO_Init+0x12e>
 8000ac2:	2601      	movs	r6, #1
 8000ac4:	e7d3      	b.n	8000a6e <HAL_GPIO_Init+0x12e>
 8000ac6:	2602      	movs	r6, #2
 8000ac8:	e7d1      	b.n	8000a6e <HAL_GPIO_Init+0x12e>
 8000aca:	2603      	movs	r6, #3
 8000acc:	e7cf      	b.n	8000a6e <HAL_GPIO_Init+0x12e>
 8000ace:	bf00      	nop
 8000ad0:	40013c00 	.word	0x40013c00
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000adc:	b10a      	cbz	r2, 8000ae2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ade:	6181      	str	r1, [r0, #24]
 8000ae0:	4770      	bx	lr
 8000ae2:	0409      	lsls	r1, r1, #16
 8000ae4:	e7fb      	b.n	8000ade <HAL_GPIO_WritePin+0x2>

08000ae6 <I2C_MemoryTransmit_TXE_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->EventCount == 0U)
 8000ae6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000ae8:	b983      	cbnz	r3, 8000b0c <I2C_MemoryTransmit_TXE_BTF+0x26>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000aea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000aec:	6802      	ldr	r2, [r0, #0]
 8000aee:	2b01      	cmp	r3, #1
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000af0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000af2:	d105      	bne.n	8000b00 <I2C_MemoryTransmit_TXE_BTF+0x1a>
 8000af4:	b2db      	uxtb	r3, r3
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000af6:	6113      	str	r3, [r2, #16]

      hi2c->EventCount += 2U;
 8000af8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000afa:	3302      	adds	r3, #2
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);

      hi2c->EventCount++;
 8000afc:	6503      	str	r3, [r0, #80]	; 0x50
 8000afe:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8000b00:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000b04:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8000b06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000b08:	3301      	adds	r3, #1
 8000b0a:	e7f7      	b.n	8000afc <I2C_MemoryTransmit_TXE_BTF+0x16>
    }
  }
  else if (hi2c->EventCount == 1U)
 8000b0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d103      	bne.n	8000b1a <I2C_MemoryTransmit_TXE_BTF+0x34>
  {
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000b12:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000b14:	6802      	ldr	r2, [r0, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	e7f4      	b.n	8000b04 <I2C_MemoryTransmit_TXE_BTF+0x1e>

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8000b1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d117      	bne.n	8000b50 <I2C_MemoryTransmit_TXE_BTF+0x6a>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000b20:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b24:	2b22      	cmp	r3, #34	; 0x22
 8000b26:	d105      	bne.n	8000b34 <I2C_MemoryTransmit_TXE_BTF+0x4e>
    {
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b28:	6802      	ldr	r2, [r0, #0]
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	4770      	bx	lr
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000b34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b38:	2b21      	cmp	r3, #33	; 0x21
 8000b3a:	d109      	bne.n	8000b50 <I2C_MemoryTransmit_TXE_BTF+0x6a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b3e:	6802      	ldr	r2, [r0, #0]
 8000b40:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000b44:	6111      	str	r1, [r2, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000b46:	6243      	str	r3, [r0, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000b48:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	8543      	strh	r3, [r0, #42]	; 0x2a
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_I2C_Init>:
{
 8000b54:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000b56:	4604      	mov	r4, r0
 8000b58:	b908      	cbnz	r0, 8000b5e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b66:	b91b      	cbnz	r3, 8000b70 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000b68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000b6c:	f001 fe2a 	bl	80027c4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b70:	2324      	movs	r3, #36	; 0x24
 8000b72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f022 0201 	bic.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b8e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b90:	f000 fff4 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b94:	6865      	ldr	r5, [r4, #4]
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <HAL_I2C_Init+0x148>)
 8000b98:	429d      	cmp	r5, r3
 8000b9a:	d84d      	bhi.n	8000c38 <HAL_I2C_Init+0xe4>
 8000b9c:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <HAL_I2C_Init+0x14c>)
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d9db      	bls.n	8000b5a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ba2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ba4:	493f      	ldr	r1, [pc, #252]	; (8000ca4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ba6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ba8:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bb4:	6a13      	ldr	r3, [r2, #32]
 8000bb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bba:	3101      	adds	r1, #1
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bc0:	69d1      	ldr	r1, [r2, #28]
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <HAL_I2C_Init+0x148>)
 8000bc4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000bc8:	429d      	cmp	r5, r3
 8000bca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000bce:	f100 30ff 	add.w	r0, r0, #4294967295
 8000bd2:	d848      	bhi.n	8000c66 <HAL_I2C_Init+0x112>
 8000bd4:	006d      	lsls	r5, r5, #1
 8000bd6:	fbb0 f0f5 	udiv	r0, r0, r5
 8000bda:	3001      	adds	r0, #1
 8000bdc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	bf38      	it	cc
 8000be4:	2304      	movcc	r3, #4
 8000be6:	430b      	orrs	r3, r1
 8000be8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000bea:	6811      	ldr	r1, [r2, #0]
 8000bec:	6a20      	ldr	r0, [r4, #32]
 8000bee:	69e3      	ldr	r3, [r4, #28]
 8000bf0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000bf4:	4303      	orrs	r3, r0
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000bfa:	6891      	ldr	r1, [r2, #8]
 8000bfc:	68e0      	ldr	r0, [r4, #12]
 8000bfe:	6923      	ldr	r3, [r4, #16]
 8000c00:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000c04:	4303      	orrs	r3, r0
 8000c06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c0e:	68d1      	ldr	r1, [r2, #12]
 8000c10:	69a0      	ldr	r0, [r4, #24]
 8000c12:	6963      	ldr	r3, [r4, #20]
 8000c14:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000c1e:	6813      	ldr	r3, [r2, #0]
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c26:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000c28:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c2a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c30:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c32:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_I2C_Init+0x154>)
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d98d      	bls.n	8000b5a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c3e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c40:	4e18      	ldr	r6, [pc, #96]	; (8000ca4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c42:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c44:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c4c:	4333      	orrs	r3, r6
 8000c4e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c50:	6a13      	ldr	r3, [r2, #32]
 8000c52:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c56:	4371      	muls	r1, r6
 8000c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c5c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000c60:	fbb1 f1f6 	udiv	r1, r1, r6
 8000c64:	e7a9      	b.n	8000bba <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c66:	68a3      	ldr	r3, [r4, #8]
 8000c68:	b953      	cbnz	r3, 8000c80 <HAL_I2C_Init+0x12c>
 8000c6a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000c6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c72:	1c43      	adds	r3, r0, #1
 8000c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c78:	b16b      	cbz	r3, 8000c96 <HAL_I2C_Init+0x142>
 8000c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7e:	e7b2      	b.n	8000be6 <HAL_I2C_Init+0x92>
 8000c80:	2319      	movs	r3, #25
 8000c82:	436b      	muls	r3, r5
 8000c84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c88:	1c43      	adds	r3, r0, #1
 8000c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c8e:	b113      	cbz	r3, 8000c96 <HAL_I2C_Init+0x142>
 8000c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c94:	e7a7      	b.n	8000be6 <HAL_I2C_Init+0x92>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e7a5      	b.n	8000be6 <HAL_I2C_Init+0x92>
 8000c9a:	bf00      	nop
 8000c9c:	000186a0 	.word	0x000186a0
 8000ca0:	001e847f 	.word	0x001e847f
 8000ca4:	000f4240 	.word	0x000f4240
 8000ca8:	003d08ff 	.word	0x003d08ff

08000cac <HAL_I2C_MasterTxCpltCallback>:
 8000cac:	4770      	bx	lr

08000cae <HAL_I2C_MasterRxCpltCallback>:
 8000cae:	4770      	bx	lr

08000cb0 <HAL_I2C_SlaveTxCpltCallback>:
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_I2C_SlaveRxCpltCallback>:
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_I2C_AddrCallback>:
{
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_I2C_ListenCpltCallback>:
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_I2C_MemTxCpltCallback>:
 8000cb8:	4770      	bx	lr

08000cba <HAL_I2C_MemRxCpltCallback>:
 8000cba:	4770      	bx	lr

08000cbc <HAL_I2C_ErrorCallback>:
 8000cbc:	4770      	bx	lr

08000cbe <HAL_I2C_AbortCpltCallback>:
{
 8000cbe:	4770      	bx	lr

08000cc0 <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8000cc0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8000cc2:	b538      	push	{r3, r4, r5, lr}

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000cc4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8000cc8:	6b45      	ldr	r5, [r0, #52]	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000cca:	b2d2      	uxtb	r2, r2
  if (hi2c->hdmatx != NULL)
 8000ccc:	b10d      	cbz	r5, 8000cd2 <I2C_DMAAbort+0x12>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63eb      	str	r3, [r5, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8000cd2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000cd4:	b10c      	cbz	r4, 8000cda <I2C_DMAAbort+0x1a>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	63e3      	str	r3, [r4, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000cda:	6803      	ldr	r3, [r0, #0]
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000ce2:	6019      	str	r1, [r3, #0]

  hi2c->XferCount = 0U;
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	8541      	strh	r1, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8000ce8:	b105      	cbz	r5, 8000cec <I2C_DMAAbort+0x2c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8000cea:	6529      	str	r1, [r5, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8000cec:	b104      	cbz	r4, 8000cf0 <I2C_DMAAbort+0x30>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8000cee:	6521      	str	r1, [r4, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8000cf0:	6819      	ldr	r1, [r3, #0]
 8000cf2:	f021 0101 	bic.w	r1, r1, #1
 8000cf6:	6019      	str	r1, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000cf8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8000cfc:	2960      	cmp	r1, #96	; 0x60
 8000cfe:	d109      	bne.n	8000d14 <I2C_DMAAbort+0x54>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8000d00:	2320      	movs	r3, #32
 8000d02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8000d0c:	6403      	str	r3, [r0, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8000d0e:	f7ff ffd6 	bl	8000cbe <HAL_I2C_AbortCpltCallback>
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000d14:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000d18:	2a28      	cmp	r2, #40	; 0x28
 8000d1a:	d10e      	bne.n	8000d3a <I2C_DMAAbort+0x7a>
    {
      /* Renable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000d1c:	6819      	ldr	r1, [r3, #0]
 8000d1e:	f041 0101 	orr.w	r1, r1, #1
 8000d22:	6019      	str	r1, [r3, #0]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000d2a:	6019      	str	r1, [r3, #0]

      /* keep HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8000d30:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8000d34:	f7ff ffc2 	bl	8000cbc <HAL_I2C_ErrorCallback>
 8000d38:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8000d46:	e7f5      	b.n	8000d34 <I2C_DMAAbort+0x74>

08000d48 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000d48:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000d4c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000d50:	2b10      	cmp	r3, #16
{
 8000d52:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000d54:	b2d2      	uxtb	r2, r2
{
 8000d56:	4604      	mov	r4, r0
 8000d58:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000d5a:	d105      	bne.n	8000d68 <I2C_ITError+0x20>
 8000d5c:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000d5e:	bf02      	ittt	eq
 8000d60:	6819      	ldreq	r1, [r3, #0]
 8000d62:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 8000d66:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000d68:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8000d6c:	2928      	cmp	r1, #40	; 0x28
 8000d6e:	d13d      	bne.n	8000dec <I2C_ITError+0xa4>
    hi2c->PreviousState = I2C_STATE_NONE;
 8000d70:	2200      	movs	r2, #0
 8000d72:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8000d74:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8000d7e:	d05c      	beq.n	8000e3a <I2C_ITError+0xf2>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000d80:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000d82:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d88:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000d8a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <I2C_ITError+0x140>)
 8000d92:	d038      	beq.n	8000e06 <I2C_ITError+0xbe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000d94:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000d96:	f7ff fdbd 	bl	8000914 <HAL_DMA_Abort_IT>
 8000d9a:	b150      	cbz	r0, 8000db2 <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8000d9c:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000d9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8000da0:	6813      	ldr	r3, [r2, #0]
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000da8:	2320      	movs	r3, #32
 8000daa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000dae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000db0:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8000db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8000db4:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000db6:	bf1f      	itttt	ne
 8000db8:	6822      	ldrne	r2, [r4, #0]
 8000dba:	6853      	ldrne	r3, [r2, #4]
 8000dbc:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 8000dc0:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8000dc2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000dc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000dc8:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8000dca:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000dcc:	d50d      	bpl.n	8000dea <I2C_ITError+0xa2>
 8000dce:	2b28      	cmp	r3, #40	; 0x28
 8000dd0:	d10b      	bne.n	8000dea <I2C_ITError+0xa2>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <I2C_ITError+0x144>)
 8000dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8000dd6:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8000ddc:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8000dde:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000de2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8000de6:	f7ff ff66 	bl	8000cb6 <HAL_I2C_ListenCpltCallback>
 8000dea:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8000dec:	6859      	ldr	r1, [r3, #4]
 8000dee:	0508      	lsls	r0, r1, #20
 8000df0:	d404      	bmi.n	8000dfc <I2C_ITError+0xb4>
 8000df2:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8000df4:	bf1c      	itt	ne
 8000df6:	2220      	movne	r2, #32
 8000df8:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e00:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8000e04:	e7b8      	b.n	8000d78 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000e06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e08:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000e0a:	f7ff fd83 	bl	8000914 <HAL_DMA_Abort_IT>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d0cf      	beq.n	8000db2 <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	0651      	lsls	r1, r2, #25
 8000e18:	d505      	bpl.n	8000e26 <I2C_ITError+0xde>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8000e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e22:	3301      	adds	r3, #1
 8000e24:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8000e26:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000e32:	2320      	movs	r3, #32
 8000e34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8000e38:	e7b9      	b.n	8000dae <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000e3a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8000e3e:	2960      	cmp	r1, #96	; 0x60
 8000e40:	d115      	bne.n	8000e6e <I2C_ITError+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8000e42:	2120      	movs	r1, #32
 8000e44:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e48:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000e4a:	695a      	ldr	r2, [r3, #20]
 8000e4c:	0652      	lsls	r2, r2, #25
 8000e4e:	d505      	bpl.n	8000e5c <I2C_ITError+0x114>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e58:	3301      	adds	r3, #1
 8000e5a:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8000e5c:	6822      	ldr	r2, [r4, #0]
 8000e5e:	6813      	ldr	r3, [r2, #0]
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff ff29 	bl	8000cbe <HAL_I2C_AbortCpltCallback>
 8000e6c:	e7a1      	b.n	8000db2 <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	0650      	lsls	r0, r2, #25
 8000e72:	d505      	bpl.n	8000e80 <I2C_ITError+0x138>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8000e80:	4620      	mov	r0, r4
 8000e82:	f7ff ff1b 	bl	8000cbc <HAL_I2C_ErrorCallback>
 8000e86:	e794      	b.n	8000db2 <I2C_ITError+0x6a>
 8000e88:	08000cc1 	.word	0x08000cc1
 8000e8c:	ffff0000 	.word	0xffff0000

08000e90 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000e90:	6803      	ldr	r3, [r0, #0]
{
 8000e92:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000e94:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000e96:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000e98:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8000e9c:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000e9e:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000ea0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000ea4:	2910      	cmp	r1, #16
{
 8000ea6:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000ea8:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000eaa:	d002      	beq.n	8000eb2 <HAL_I2C_EV_IRQHandler+0x22>
 8000eac:	2940      	cmp	r1, #64	; 0x40
 8000eae:	f040 82a0 	bne.w	80013f2 <HAL_I2C_EV_IRQHandler+0x562>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000eb2:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000eb4:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8000eb6:	f011 0f01 	tst.w	r1, #1
 8000eba:	d107      	bne.n	8000ecc <HAL_I2C_EV_IRQHandler+0x3c>
 8000ebc:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8000ec0:	d002      	beq.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 8000ec2:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8000ec6:	d150      	bne.n	8000f6a <HAL_I2C_EV_IRQHandler+0xda>
}
 8000ec8:	b00d      	add	sp, #52	; 0x34
 8000eca:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000ecc:	0595      	lsls	r5, r2, #22
 8000ece:	d54c      	bpl.n	8000f6a <HAL_I2C_EV_IRQHandler+0xda>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8000ed0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ed2:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8000ed6:	d10c      	bne.n	8000ef2 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8000ed8:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8000eda:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8000edc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8000ee0:	2a40      	cmp	r2, #64	; 0x40
 8000ee2:	d111      	bne.n	8000f08 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8000ee4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ee6:	b952      	cbnz	r2, 8000efe <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000ee8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000eea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	e7ea      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8000ef2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ef4:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8000ef8:	d1f0      	bne.n	8000edc <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8000efa:	2208      	movs	r2, #8
 8000efc:	e7ed      	b.n	8000eda <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000efe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	e7f2      	b.n	8000eee <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f08:	6922      	ldr	r2, [r4, #16]
 8000f0a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8000f0e:	d119      	bne.n	8000f44 <HAL_I2C_EV_IRQHandler+0xb4>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f10:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8000f14:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000f16:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000f18:	bf16      	itet	ne
 8000f1a:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000f1e:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000f22:	b2d2      	uxtbne	r2, r2
 8000f24:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8000f26:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f28:	b10a      	cbz	r2, 8000f2e <HAL_I2C_EV_IRQHandler+0x9e>
 8000f2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000f2c:	b92a      	cbnz	r2, 8000f3a <HAL_I2C_EV_IRQHandler+0xaa>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8000f2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	d0c9      	beq.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8000f34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000f36:	2a00      	cmp	r2, #0
 8000f38:	d0c6      	beq.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e7c1      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->EventCount == 0U)
 8000f44:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f46:	b932      	cbnz	r2, 8000f56 <HAL_I2C_EV_IRQHandler+0xc6>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8000f48:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f4a:	11d2      	asrs	r2, r2, #7
 8000f4c:	f002 0206 	and.w	r2, r2, #6
 8000f50:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8000f54:	e7cb      	b.n	8000eee <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8000f56:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f58:	2a01      	cmp	r2, #1
 8000f5a:	d1b5      	bne.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8000f5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f5e:	11d2      	asrs	r2, r2, #7
 8000f60:	f002 0206 	and.w	r2, r2, #6
 8000f64:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8000f68:	e7c1      	b.n	8000eee <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000f6a:	070d      	lsls	r5, r1, #28
 8000f6c:	d50e      	bpl.n	8000f8c <HAL_I2C_EV_IRQHandler+0xfc>
 8000f6e:	0595      	lsls	r5, r2, #22
 8000f70:	d50c      	bpl.n	8000f8c <HAL_I2C_EV_IRQHandler+0xfc>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8000f72:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8000f78:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f7a:	b912      	cbnz	r2, 8000f82 <HAL_I2C_EV_IRQHandler+0xf2>
 8000f7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000f7e:	2900      	cmp	r1, #0
 8000f80:	d0a2      	beq.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8000f82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d1d8      	bne.n	8000f3a <HAL_I2C_EV_IRQHandler+0xaa>
 8000f88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f8a:	e7d3      	b.n	8000f34 <HAL_I2C_EV_IRQHandler+0xa4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000f8c:	078d      	lsls	r5, r1, #30
 8000f8e:	f140 80e1 	bpl.w	8001154 <HAL_I2C_EV_IRQHandler+0x2c4>
 8000f92:	0595      	lsls	r5, r2, #22
 8000f94:	f140 80de 	bpl.w	8001154 <HAL_I2C_EV_IRQHandler+0x2c4>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8000f98:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8000f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8000f9e:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000fa0:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8000fa4:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8000fa6:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000fa8:	f040 80cc 	bne.w	8001144 <HAL_I2C_EV_IRQHandler+0x2b4>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8000fac:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000fae:	b940      	cbnz	r0, 8000fc2 <HAL_I2C_EV_IRQHandler+0x132>
 8000fb0:	2940      	cmp	r1, #64	; 0x40
 8000fb2:	d106      	bne.n	8000fc2 <HAL_I2C_EV_IRQHandler+0x132>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fb4:	9001      	str	r0, [sp, #4]
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	9b01      	ldr	r3, [sp, #4]
 8000fc0:	e782      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8000fc2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000fc4:	b989      	cbnz	r1, 8000fea <HAL_I2C_EV_IRQHandler+0x15a>
 8000fc6:	6920      	ldr	r0, [r4, #16]
 8000fc8:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000fcc:	d10d      	bne.n	8000fea <HAL_I2C_EV_IRQHandler+0x15a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fce:	9102      	str	r1, [sp, #8]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	9202      	str	r2, [sp, #8]
 8000fd4:	699a      	ldr	r2, [r3, #24]
 8000fd6:	9202      	str	r2, [sp, #8]
 8000fd8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fe0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8000fe2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fe4:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8000fe6:	6523      	str	r3, [r4, #80]	; 0x50
 8000fe8:	e76e      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8000fea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8000fec:	b289      	uxth	r1, r1
 8000fee:	b951      	cbnz	r1, 8001006 <HAL_I2C_EV_IRQHandler+0x176>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ff0:	9103      	str	r1, [sp, #12]
 8000ff2:	695a      	ldr	r2, [r3, #20]
 8000ff4:	9203      	str	r2, [sp, #12]
 8000ff6:	699a      	ldr	r2, [r3, #24]
 8000ff8:	9203      	str	r2, [sp, #12]
 8000ffa:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	e019      	b.n	800103a <HAL_I2C_EV_IRQHandler+0x1aa>
      else if (hi2c->XferCount == 1U)
 8001006:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001008:	b289      	uxth	r1, r1
 800100a:	2901      	cmp	r1, #1
 800100c:	d149      	bne.n	80010a2 <HAL_I2C_EV_IRQHandler+0x212>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800100e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001012:	d11b      	bne.n	800104c <HAL_I2C_EV_IRQHandler+0x1bc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800101a:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001022:	d00c      	beq.n	800103e <HAL_I2C_EV_IRQHandler+0x1ae>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800102c:	2200      	movs	r2, #0
 800102e:	9204      	str	r2, [sp, #16]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	9204      	str	r2, [sp, #16]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	9304      	str	r3, [sp, #16]
 8001038:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	e7d3      	b.n	8000fe6 <HAL_I2C_EV_IRQHandler+0x156>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800103e:	9205      	str	r2, [sp, #20]
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	9205      	str	r2, [sp, #20]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	9205      	str	r2, [sp, #20]
 8001048:	9a05      	ldr	r2, [sp, #20]
 800104a:	e7d7      	b.n	8000ffc <HAL_I2C_EV_IRQHandler+0x16c>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800104c:	2a08      	cmp	r2, #8
 800104e:	d01c      	beq.n	800108a <HAL_I2C_EV_IRQHandler+0x1fa>
 8001050:	2a20      	cmp	r2, #32
 8001052:	d01a      	beq.n	800108a <HAL_I2C_EV_IRQHandler+0x1fa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001054:	2d12      	cmp	r5, #18
 8001056:	d10d      	bne.n	8001074 <HAL_I2C_EV_IRQHandler+0x1e4>
 8001058:	2a01      	cmp	r2, #1
 800105a:	d116      	bne.n	800108a <HAL_I2C_EV_IRQHandler+0x1fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001062:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001064:	2200      	movs	r2, #0
 8001066:	9206      	str	r2, [sp, #24]
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	9206      	str	r2, [sp, #24]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	9306      	str	r3, [sp, #24]
 8001070:	9b06      	ldr	r3, [sp, #24]
 8001072:	e7e2      	b.n	800103a <HAL_I2C_EV_IRQHandler+0x1aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001074:	2a10      	cmp	r2, #16
 8001076:	d8f1      	bhi.n	800105c <HAL_I2C_EV_IRQHandler+0x1cc>
 8001078:	4993      	ldr	r1, [pc, #588]	; (80012c8 <HAL_I2C_EV_IRQHandler+0x438>)
 800107a:	fa21 f202 	lsr.w	r2, r1, r2
 800107e:	07d0      	lsls	r0, r2, #31
 8001080:	d5ec      	bpl.n	800105c <HAL_I2C_EV_IRQHandler+0x1cc>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001088:	e7eb      	b.n	8001062 <HAL_I2C_EV_IRQHandler+0x1d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001090:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001092:	2200      	movs	r2, #0
 8001094:	9207      	str	r2, [sp, #28]
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	9207      	str	r2, [sp, #28]
 800109a:	699a      	ldr	r2, [r3, #24]
 800109c:	9207      	str	r2, [sp, #28]
 800109e:	9a07      	ldr	r2, [sp, #28]
 80010a0:	e7ac      	b.n	8000ffc <HAL_I2C_EV_IRQHandler+0x16c>
      else if (hi2c->XferCount == 2U)
 80010a2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80010a4:	b289      	uxth	r1, r1
 80010a6:	2902      	cmp	r1, #2
 80010a8:	d12c      	bne.n	8001104 <HAL_I2C_EV_IRQHandler+0x274>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80010aa:	2a10      	cmp	r2, #16
 80010ac:	d803      	bhi.n	80010b6 <HAL_I2C_EV_IRQHandler+0x226>
 80010ae:	4986      	ldr	r1, [pc, #536]	; (80012c8 <HAL_I2C_EV_IRQHandler+0x438>)
 80010b0:	40d1      	lsrs	r1, r2
 80010b2:	07c9      	lsls	r1, r1, #31
 80010b4:	d422      	bmi.n	80010fc <HAL_I2C_EV_IRQHandler+0x26c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010b6:	6819      	ldr	r1, [r3, #0]
 80010b8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80010bc:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010c4:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	050d      	lsls	r5, r1, #20
 80010ca:	d50f      	bpl.n	80010ec <HAL_I2C_EV_IRQHandler+0x25c>
 80010cc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80010d0:	d008      	beq.n	80010e4 <HAL_I2C_EV_IRQHandler+0x254>
 80010d2:	1e51      	subs	r1, r2, #1
 80010d4:	291f      	cmp	r1, #31
 80010d6:	bf9d      	ittte	ls
 80010d8:	4a7c      	ldrls	r2, [pc, #496]	; (80012cc <HAL_I2C_EV_IRQHandler+0x43c>)
 80010da:	40ca      	lsrls	r2, r1
 80010dc:	43d2      	mvnls	r2, r2
 80010de:	2201      	movhi	r2, #1
 80010e0:	07d0      	lsls	r0, r2, #31
 80010e2:	d403      	bmi.n	80010ec <HAL_I2C_EV_IRQHandler+0x25c>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010ea:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ec:	2200      	movs	r2, #0
 80010ee:	9208      	str	r2, [sp, #32]
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	9208      	str	r2, [sp, #32]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	9308      	str	r3, [sp, #32]
 80010f8:	9b08      	ldr	r3, [sp, #32]
 80010fa:	e79e      	b.n	800103a <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010fc:	6819      	ldr	r1, [r3, #0]
 80010fe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001102:	e7df      	b.n	80010c4 <HAL_I2C_EV_IRQHandler+0x234>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800110a:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800110c:	6859      	ldr	r1, [r3, #4]
 800110e:	0509      	lsls	r1, r1, #20
 8001110:	d510      	bpl.n	8001134 <HAL_I2C_EV_IRQHandler+0x2a4>
 8001112:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001116:	d009      	beq.n	800112c <HAL_I2C_EV_IRQHandler+0x29c>
 8001118:	3a01      	subs	r2, #1
 800111a:	2a1f      	cmp	r2, #31
 800111c:	bf9d      	ittte	ls
 800111e:	496b      	ldrls	r1, [pc, #428]	; (80012cc <HAL_I2C_EV_IRQHandler+0x43c>)
 8001120:	fa21 f202 	lsrls.w	r2, r1, r2
 8001124:	43d2      	mvnls	r2, r2
 8001126:	2201      	movhi	r2, #1
 8001128:	07d2      	lsls	r2, r2, #31
 800112a:	d403      	bmi.n	8001134 <HAL_I2C_EV_IRQHandler+0x2a4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001132:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001134:	2200      	movs	r2, #0
 8001136:	9209      	str	r2, [sp, #36]	; 0x24
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	9209      	str	r2, [sp, #36]	; 0x24
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	9309      	str	r3, [sp, #36]	; 0x24
 8001140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001142:	e77a      	b.n	800103a <HAL_I2C_EV_IRQHandler+0x1aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001144:	2200      	movs	r2, #0
 8001146:	920a      	str	r2, [sp, #40]	; 0x28
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	920a      	str	r2, [sp, #40]	; 0x28
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	930a      	str	r3, [sp, #40]	; 0x28
 8001150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001152:	e6b9      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001154:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001158:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800115a:	f000 808a 	beq.w	8001272 <HAL_I2C_EV_IRQHandler+0x3e2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800115e:	0505      	lsls	r5, r0, #20
 8001160:	f53f aeb2 	bmi.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001164:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001168:	f001 0104 	and.w	r1, r1, #4
 800116c:	d03c      	beq.n	80011e8 <HAL_I2C_EV_IRQHandler+0x358>
 800116e:	0550      	lsls	r0, r2, #21
 8001170:	d53a      	bpl.n	80011e8 <HAL_I2C_EV_IRQHandler+0x358>
 8001172:	2900      	cmp	r1, #0
 8001174:	d138      	bne.n	80011e8 <HAL_I2C_EV_IRQHandler+0x358>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001176:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800117a:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800117c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001180:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001182:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001184:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001186:	b9c5      	cbnz	r5, 80011ba <HAL_I2C_EV_IRQHandler+0x32a>
 8001188:	2a21      	cmp	r2, #33	; 0x21
 800118a:	d118      	bne.n	80011be <HAL_I2C_EV_IRQHandler+0x32e>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800118c:	2808      	cmp	r0, #8
 800118e:	d053      	beq.n	8001238 <HAL_I2C_EV_IRQHandler+0x3a8>
 8001190:	2820      	cmp	r0, #32
 8001192:	d051      	beq.n	8001238 <HAL_I2C_EV_IRQHandler+0x3a8>
 8001194:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001198:	d04e      	beq.n	8001238 <HAL_I2C_EV_IRQHandler+0x3a8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80011a0:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80011a2:	2311      	movs	r3, #17
 80011a4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80011ac:	2320      	movs	r3, #32
 80011ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff fd7a 	bl	8000cac <HAL_I2C_MasterTxCpltCallback>
 80011b8:	e686      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80011ba:	2a21      	cmp	r2, #33	; 0x21
 80011bc:	d005      	beq.n	80011ca <HAL_I2C_EV_IRQHandler+0x33a>
 80011be:	2940      	cmp	r1, #64	; 0x40
 80011c0:	f47f ae82 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80011c4:	2a22      	cmp	r2, #34	; 0x22
 80011c6:	f47f ae7f 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 80011ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80011cc:	b292      	uxth	r2, r2
 80011ce:	b91a      	cbnz	r2, 80011d8 <HAL_I2C_EV_IRQHandler+0x348>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011d6:	e6b3      	b.n	8000f40 <HAL_I2C_EV_IRQHandler+0xb0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80011d8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80011dc:	2a40      	cmp	r2, #64	; 0x40
 80011de:	d111      	bne.n	8001204 <HAL_I2C_EV_IRQHandler+0x374>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff fc80 	bl	8000ae6 <I2C_MemoryTransmit_TXE_BTF>
 80011e6:	e66f      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011e8:	2900      	cmp	r1, #0
 80011ea:	f43f ae6d 	beq.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 80011ee:	0592      	lsls	r2, r2, #22
 80011f0:	f57f ae6a 	bpl.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80011f6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80011fa:	2a21      	cmp	r2, #33	; 0x21
 80011fc:	d133      	bne.n	8001266 <HAL_I2C_EV_IRQHandler+0x3d6>
    if (hi2c->XferCount != 0U)
 80011fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001200:	b292      	uxth	r2, r2
 8001202:	b14a      	cbz	r2, 8001218 <HAL_I2C_EV_IRQHandler+0x388>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001204:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001206:	f812 1b01 	ldrb.w	r1, [r2], #1
 800120a:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 800120c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800120e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001210:	3b01      	subs	r3, #1
 8001212:	b29b      	uxth	r3, r3
 8001214:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001216:	e657      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001218:	2908      	cmp	r1, #8
 800121a:	d00d      	beq.n	8001238 <HAL_I2C_EV_IRQHandler+0x3a8>
 800121c:	2920      	cmp	r1, #32
 800121e:	d00b      	beq.n	8001238 <HAL_I2C_EV_IRQHandler+0x3a8>
 8001220:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001224:	d008      	beq.n	8001238 <HAL_I2C_EV_IRQHandler+0x3a8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001226:	6859      	ldr	r1, [r3, #4]
 8001228:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800122c:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800122e:	2311      	movs	r3, #17
 8001230:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001232:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001236:	e7b9      	b.n	80011ac <HAL_I2C_EV_IRQHandler+0x31c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800123e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001246:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001248:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800124a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800124c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800124e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001252:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001256:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800125a:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 800125c:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800125e:	d1a9      	bne.n	80011b4 <HAL_I2C_EV_IRQHandler+0x324>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001260:	f7ff fd2a 	bl	8000cb8 <HAL_I2C_MemTxCpltCallback>
 8001264:	e630      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001266:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800126a:	2b40      	cmp	r3, #64	; 0x40
 800126c:	f47f ae2c 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 8001270:	e7b6      	b.n	80011e0 <HAL_I2C_EV_IRQHandler+0x350>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001272:	0505      	lsls	r5, r0, #20
 8001274:	f53f ae28 	bmi.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001278:	f011 0f40 	tst.w	r1, #64	; 0x40
 800127c:	f001 0104 	and.w	r1, r1, #4
 8001280:	d04d      	beq.n	800131e <HAL_I2C_EV_IRQHandler+0x48e>
 8001282:	0550      	lsls	r0, r2, #21
 8001284:	d54b      	bpl.n	800131e <HAL_I2C_EV_IRQHandler+0x48e>
 8001286:	2900      	cmp	r1, #0
 8001288:	d149      	bne.n	800131e <HAL_I2C_EV_IRQHandler+0x48e>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800128a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800128e:	2a22      	cmp	r2, #34	; 0x22
 8001290:	f47f ae1a 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8001294:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001296:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8001298:	2a03      	cmp	r2, #3
 800129a:	d919      	bls.n	80012d0 <HAL_I2C_EV_IRQHandler+0x440>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800129c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80012a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80012a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80012b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	f47f ae07 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	6853      	ldr	r3, [r2, #4]
 80012be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012c2:	6053      	str	r3, [r2, #4]
 80012c4:	e600      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 80012c6:	bf00      	nop
 80012c8:	00010014 	.word	0x00010014
 80012cc:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80012d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80012d2:	2802      	cmp	r0, #2
 80012d4:	f43f adf8 	beq.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 80012d8:	2a01      	cmp	r2, #1
 80012da:	f63f adf5 	bhi.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012e4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80012ec:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80012f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012f6:	3301      	adds	r3, #1
 80012f8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80012fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001302:	2320      	movs	r3, #32
 8001304:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001308:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800130c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001310:	2b40      	cmp	r3, #64	; 0x40
 8001312:	d168      	bne.n	80013e6 <HAL_I2C_EV_IRQHandler+0x556>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001314:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff fccf 	bl	8000cba <HAL_I2C_MemRxCpltCallback>
 800131c:	e5d4      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800131e:	2900      	cmp	r1, #0
 8001320:	f43f add2 	beq.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 8001324:	0592      	lsls	r2, r2, #22
 8001326:	f57f adcf 	bpl.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800132a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 800132c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800132e:	b289      	uxth	r1, r1
 8001330:	2904      	cmp	r1, #4
 8001332:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001334:	d109      	bne.n	800134a <HAL_I2C_EV_IRQHandler+0x4ba>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800133c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	6263      	str	r3, [r4, #36]	; 0x24
 8001348:	e761      	b.n	800120e <HAL_I2C_EV_IRQHandler+0x37e>
  else if (hi2c->XferCount == 3U)
 800134a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800134c:	b280      	uxth	r0, r0
 800134e:	2803      	cmp	r0, #3
 8001350:	d10c      	bne.n	800136c <HAL_I2C_EV_IRQHandler+0x4dc>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001352:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001354:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001356:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800135a:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800135c:	d0ef      	beq.n	800133e <HAL_I2C_EV_IRQHandler+0x4ae>
 800135e:	2a02      	cmp	r2, #2
 8001360:	d0ed      	beq.n	800133e <HAL_I2C_EV_IRQHandler+0x4ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e7e8      	b.n	800133e <HAL_I2C_EV_IRQHandler+0x4ae>
  else if (hi2c->XferCount == 2U)
 800136c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800136e:	b280      	uxth	r0, r0
 8001370:	2802      	cmp	r0, #2
 8001372:	d1e4      	bne.n	800133e <HAL_I2C_EV_IRQHandler+0x4ae>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001374:	2a01      	cmp	r2, #1
 8001376:	d001      	beq.n	800137c <HAL_I2C_EV_IRQHandler+0x4ec>
 8001378:	2a10      	cmp	r2, #16
 800137a:	d128      	bne.n	80013ce <HAL_I2C_EV_IRQHandler+0x53e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001382:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001388:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800138a:	1c53      	adds	r3, r2, #1
 800138c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800138e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001390:	3b01      	subs	r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800139c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800139e:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 80013a0:	3301      	adds	r3, #1
 80013a2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80013a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80013ac:	6853      	ldr	r3, [r2, #4]
 80013ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013b2:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80013b4:	2320      	movs	r3, #32
 80013b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013ba:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80013be:	2b40      	cmp	r3, #64	; 0x40
 80013c0:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013c8:	d10d      	bne.n	80013e6 <HAL_I2C_EV_IRQHandler+0x556>
      hi2c->PreviousState = I2C_STATE_NONE;
 80013ca:	6323      	str	r3, [r4, #48]	; 0x30
 80013cc:	e7a3      	b.n	8001316 <HAL_I2C_EV_IRQHandler+0x486>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80013ce:	2a04      	cmp	r2, #4
 80013d0:	d001      	beq.n	80013d6 <HAL_I2C_EV_IRQHandler+0x546>
 80013d2:	2a02      	cmp	r2, #2
 80013d4:	d103      	bne.n	80013de <HAL_I2C_EV_IRQHandler+0x54e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013dc:	e7d1      	b.n	8001382 <HAL_I2C_EV_IRQHandler+0x4f2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e4:	e7cd      	b.n	8001382 <HAL_I2C_EV_IRQHandler+0x4f2>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80013e6:	2312      	movs	r3, #18
 80013e8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff fc5f 	bl	8000cae <HAL_I2C_MasterRxCpltCallback>
 80013f0:	e56a      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80013f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013f4:	b321      	cbz	r1, 8001440 <HAL_I2C_EV_IRQHandler+0x5b0>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80013f6:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80013f8:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013fa:	f011 0f02 	tst.w	r1, #2
 80013fe:	d029      	beq.n	8001454 <HAL_I2C_EV_IRQHandler+0x5c4>
 8001400:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001404:	d026      	beq.n	8001454 <HAL_I2C_EV_IRQHandler+0x5c4>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001406:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001408:	b102      	cbz	r2, 800140c <HAL_I2C_EV_IRQHandler+0x57c>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800140a:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800140c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001410:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001414:	2a28      	cmp	r2, #40	; 0x28
 8001416:	d116      	bne.n	8001446 <HAL_I2C_EV_IRQHandler+0x5b6>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800141e:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8001420:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001424:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8001426:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800142a:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800142e:	bf54      	ite	pl
 8001430:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001432:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8001434:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff fc3b 	bl	8000cb4 <HAL_I2C_AddrCallback>
 800143e:	e543      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001440:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001442:	6959      	ldr	r1, [r3, #20]
 8001444:	e7d9      	b.n	80013fa <HAL_I2C_EV_IRQHandler+0x56a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001446:	f06f 0202 	mvn.w	r2, #2
 800144a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800144c:	2300      	movs	r3, #0
 800144e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001452:	e539      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001454:	06cd      	lsls	r5, r1, #27
 8001456:	f140 80af 	bpl.w	80015b8 <HAL_I2C_EV_IRQHandler+0x728>
 800145a:	0595      	lsls	r5, r2, #22
 800145c:	f140 80ac 	bpl.w	80015b8 <HAL_I2C_EV_IRQHandler+0x728>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001460:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800146a:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800146c:	2200      	movs	r2, #0
 800146e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	920b      	str	r2, [sp, #44]	; 0x2c
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001484:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800148a:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800148c:	d520      	bpl.n	80014d0 <HAL_I2C_EV_IRQHandler+0x640>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800148e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8001492:	2a22      	cmp	r2, #34	; 0x22
 8001494:	d148      	bne.n	8001528 <HAL_I2C_EV_IRQHandler+0x698>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8001496:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	6852      	ldr	r2, [r2, #4]
 800149c:	b292      	uxth	r2, r2
 800149e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80014a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014a2:	b292      	uxth	r2, r2
 80014a4:	b11a      	cbz	r2, 80014ae <HAL_I2C_EV_IRQHandler+0x61e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014a8:	f042 0204 	orr.w	r2, r2, #4
 80014ac:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80014b6:	f7ff fa3f 	bl	8000938 <HAL_DMA_GetState>
 80014ba:	2801      	cmp	r0, #1
 80014bc:	d008      	beq.n	80014d0 <HAL_I2C_EV_IRQHandler+0x640>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80014be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80014c0:	4b78      	ldr	r3, [pc, #480]	; (80016a4 <HAL_I2C_EV_IRQHandler+0x814>)
 80014c2:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80014c4:	f7ff fa26 	bl	8000914 <HAL_DMA_Abort_IT>
 80014c8:	b110      	cbz	r0, 80014d0 <HAL_I2C_EV_IRQHandler+0x640>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80014ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80014cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80014ce:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80014d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b313      	cbz	r3, 800151c <HAL_I2C_EV_IRQHandler+0x68c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	0752      	lsls	r2, r2, #29
 80014dc:	d509      	bpl.n	80014f2 <HAL_I2C_EV_IRQHandler+0x662>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80014e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014e6:	3301      	adds	r3, #1
 80014e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80014ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	0650      	lsls	r0, r2, #25
 80014f8:	d509      	bpl.n	800150e <HAL_I2C_EV_IRQHandler+0x67e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001502:	3301      	adds	r3, #1
 8001504:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001508:	3b01      	subs	r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800150e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	b11b      	cbz	r3, 800151c <HAL_I2C_EV_IRQHandler+0x68c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800151c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800151e:	b303      	cbz	r3, 8001562 <HAL_I2C_EV_IRQHandler+0x6d2>
    I2C_ITError(hi2c);
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff fc11 	bl	8000d48 <I2C_ITError>
 8001526:	e4cf      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8001528:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800152a:	6802      	ldr	r2, [r0, #0]
 800152c:	6852      	ldr	r2, [r2, #4]
 800152e:	b292      	uxth	r2, r2
 8001530:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001532:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001534:	b292      	uxth	r2, r2
 8001536:	b11a      	cbz	r2, 8001540 <HAL_I2C_EV_IRQHandler+0x6b0>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001538:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800153a:	f042 0204 	orr.w	r2, r2, #4
 800153e:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001546:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001548:	f7ff f9f6 	bl	8000938 <HAL_DMA_GetState>
 800154c:	2801      	cmp	r0, #1
 800154e:	d0bf      	beq.n	80014d0 <HAL_I2C_EV_IRQHandler+0x640>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001550:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001552:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <HAL_I2C_EV_IRQHandler+0x814>)
 8001554:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001556:	f7ff f9dd 	bl	8000914 <HAL_DMA_Abort_IT>
 800155a:	2800      	cmp	r0, #0
 800155c:	d0b8      	beq.n	80014d0 <HAL_I2C_EV_IRQHandler+0x640>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800155e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001560:	e7b4      	b.n	80014cc <HAL_I2C_EV_IRQHandler+0x63c>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001562:	2d2a      	cmp	r5, #42	; 0x2a
 8001564:	d106      	bne.n	8001574 <HAL_I2C_EV_IRQHandler+0x6e4>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001566:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001568:	2328      	movs	r3, #40	; 0x28
 800156a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff fb9f 	bl	8000cb2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001574:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001578:	2b28      	cmp	r3, #40	; 0x28
 800157a:	d10c      	bne.n	8001596 <HAL_I2C_EV_IRQHandler+0x706>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_I2C_EV_IRQHandler+0x818>)
 800157e:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001580:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001582:	2300      	movs	r3, #0
 8001584:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8001586:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8001588:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800158c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001590:	f7ff fb91 	bl	8000cb6 <HAL_I2C_ListenCpltCallback>
 8001594:	e498      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001598:	2b22      	cmp	r3, #34	; 0x22
 800159a:	d002      	beq.n	80015a2 <HAL_I2C_EV_IRQHandler+0x712>
 800159c:	2d22      	cmp	r5, #34	; 0x22
 800159e:	f47f ac93 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 80015a2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80015a4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80015a6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff fb7e 	bl	8000cb2 <HAL_I2C_SlaveRxCpltCallback>
 80015b6:	e487      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80015b8:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80015bc:	2821      	cmp	r0, #33	; 0x21
 80015be:	f001 0504 	and.w	r5, r1, #4
 80015c2:	d135      	bne.n	8001630 <HAL_I2C_EV_IRQHandler+0x7a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015c4:	0609      	lsls	r1, r1, #24
 80015c6:	d527      	bpl.n	8001618 <HAL_I2C_EV_IRQHandler+0x788>
 80015c8:	0551      	lsls	r1, r2, #21
 80015ca:	d525      	bpl.n	8001618 <HAL_I2C_EV_IRQHandler+0x788>
 80015cc:	bb25      	cbnz	r5, 8001618 <HAL_I2C_EV_IRQHandler+0x788>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80015ce:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80015d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015d4:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80015d6:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80015d8:	2a00      	cmp	r2, #0
 80015da:	f43f ac75 	beq.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80015e4:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80015e6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80015e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015ea:	3a01      	subs	r2, #1
 80015ec:	b292      	uxth	r2, r2
 80015ee:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80015f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015f2:	b292      	uxth	r2, r2
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	f47f ac67 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 80015fa:	2929      	cmp	r1, #41	; 0x29
 80015fc:	f47f ac64 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001606:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001608:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800160a:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800160c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff fb4d 	bl	8000cb0 <HAL_I2C_SlaveTxCpltCallback>
 8001616:	e457      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001618:	2d00      	cmp	r5, #0
 800161a:	f43f ac55 	beq.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 800161e:	0595      	lsls	r5, r2, #22
 8001620:	f57f ac52 	bpl.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8001624:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001626:	b292      	uxth	r2, r2
 8001628:	2a00      	cmp	r2, #0
 800162a:	f47f adeb 	bne.w	8001204 <HAL_I2C_EV_IRQHandler+0x374>
 800162e:	e44b      	b.n	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001630:	0648      	lsls	r0, r1, #25
 8001632:	d527      	bpl.n	8001684 <HAL_I2C_EV_IRQHandler+0x7f4>
 8001634:	0551      	lsls	r1, r2, #21
 8001636:	d525      	bpl.n	8001684 <HAL_I2C_EV_IRQHandler+0x7f4>
 8001638:	bb25      	cbnz	r5, 8001684 <HAL_I2C_EV_IRQHandler+0x7f4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800163a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800163e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001640:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001642:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8001644:	2900      	cmp	r1, #0
 8001646:	f43f ac3f 	beq.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001652:	3301      	adds	r3, #1
 8001654:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001656:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001658:	3b01      	subs	r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800165e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001660:	b29b      	uxth	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ac30 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 8001668:	2a2a      	cmp	r2, #42	; 0x2a
 800166a:	f47f ac2d 	bne.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800166e:	6822      	ldr	r2, [r4, #0]
 8001670:	6853      	ldr	r3, [r2, #4]
 8001672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001676:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001678:	2322      	movs	r3, #34	; 0x22
 800167a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800167c:	2328      	movs	r3, #40	; 0x28
 800167e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001682:	e795      	b.n	80015b0 <HAL_I2C_EV_IRQHandler+0x720>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001684:	2d00      	cmp	r5, #0
 8001686:	f43f ac1f 	beq.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
 800168a:	0592      	lsls	r2, r2, #22
 800168c:	f57f ac1c 	bpl.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8001690:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001692:	b292      	uxth	r2, r2
 8001694:	2a00      	cmp	r2, #0
 8001696:	f43f ac17 	beq.w	8000ec8 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800169a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	7013      	strb	r3, [r2, #0]
 80016a0:	e64f      	b.n	8001342 <HAL_I2C_EV_IRQHandler+0x4b2>
 80016a2:	bf00      	nop
 80016a4:	08000cc1 	.word	0x08000cc1
 80016a8:	ffff0000 	.word	0xffff0000

080016ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	4604      	mov	r4, r0
 80016b2:	b908      	cbnz	r0, 80016b8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80016b4:	2001      	movs	r0, #1
 80016b6:	e03f      	b.n	8001738 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b8:	6803      	ldr	r3, [r0, #0]
 80016ba:	07dd      	lsls	r5, r3, #31
 80016bc:	d410      	bmi.n	80016e0 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	0798      	lsls	r0, r3, #30
 80016c2:	d45a      	bmi.n	800177a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	071a      	lsls	r2, r3, #28
 80016c8:	f100 809c 	bmi.w	8001804 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	075b      	lsls	r3, r3, #29
 80016d0:	f100 80ba 	bmi.w	8001848 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d4:	69a0      	ldr	r0, [r4, #24]
 80016d6:	2800      	cmp	r0, #0
 80016d8:	f040 811b 	bne.w	8001912 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80016dc:	2000      	movs	r0, #0
 80016de:	e02b      	b.n	8001738 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e0:	4ba4      	ldr	r3, [pc, #656]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	f002 020c 	and.w	r2, r2, #12
 80016e8:	2a04      	cmp	r2, #4
 80016ea:	d007      	beq.n	80016fc <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f2:	2a08      	cmp	r2, #8
 80016f4:	d10a      	bne.n	800170c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	0259      	lsls	r1, r3, #9
 80016fa:	d507      	bpl.n	800170c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	4b9d      	ldr	r3, [pc, #628]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	039a      	lsls	r2, r3, #14
 8001702:	d5dc      	bpl.n	80016be <HAL_RCC_OscConfig+0x12>
 8001704:	6863      	ldr	r3, [r4, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1d9      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
 800170a:	e7d3      	b.n	80016b4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170c:	6863      	ldr	r3, [r4, #4]
 800170e:	4d99      	ldr	r5, [pc, #612]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d113      	bne.n	800173e <HAL_RCC_OscConfig+0x92>
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800171e:	f7fe ff2d 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4d94      	ldr	r5, [pc, #592]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001724:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	039b      	lsls	r3, r3, #14
 800172a:	d4c8      	bmi.n	80016be <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7fe ff26 	bl	800057c <HAL_GetTick>
 8001730:	1b80      	subs	r0, r0, r6
 8001732:	2864      	cmp	r0, #100	; 0x64
 8001734:	d9f7      	bls.n	8001726 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001736:	2003      	movs	r0, #3
}
 8001738:	b002      	add	sp, #8
 800173a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001742:	d104      	bne.n	800174e <HAL_RCC_OscConfig+0xa2>
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174a:	602b      	str	r3, [r5, #0]
 800174c:	e7e3      	b.n	8001716 <HAL_RCC_OscConfig+0x6a>
 800174e:	682a      	ldr	r2, [r5, #0]
 8001750:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001754:	602a      	str	r2, [r5, #0]
 8001756:	682a      	ldr	r2, [r5, #0]
 8001758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800175c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1dd      	bne.n	800171e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001762:	f7fe ff0b 	bl	800057c <HAL_GetTick>
 8001766:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001768:	682b      	ldr	r3, [r5, #0]
 800176a:	039f      	lsls	r7, r3, #14
 800176c:	d5a7      	bpl.n	80016be <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176e:	f7fe ff05 	bl	800057c <HAL_GetTick>
 8001772:	1b80      	subs	r0, r0, r6
 8001774:	2864      	cmp	r0, #100	; 0x64
 8001776:	d9f7      	bls.n	8001768 <HAL_RCC_OscConfig+0xbc>
 8001778:	e7dd      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800177a:	4b7e      	ldr	r3, [pc, #504]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	f012 0f0c 	tst.w	r2, #12
 8001782:	d007      	beq.n	8001794 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178a:	2a08      	cmp	r2, #8
 800178c:	d111      	bne.n	80017b2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	025e      	lsls	r6, r3, #9
 8001792:	d40e      	bmi.n	80017b2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001794:	4b77      	ldr	r3, [pc, #476]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	0795      	lsls	r5, r2, #30
 800179a:	d502      	bpl.n	80017a2 <HAL_RCC_OscConfig+0xf6>
 800179c:	68e2      	ldr	r2, [r4, #12]
 800179e:	2a01      	cmp	r2, #1
 80017a0:	d188      	bne.n	80016b4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	6921      	ldr	r1, [r4, #16]
 80017a6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017aa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017ae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b0:	e788      	b.n	80016c4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b2:	68e2      	ldr	r2, [r4, #12]
 80017b4:	4b70      	ldr	r3, [pc, #448]	; (8001978 <HAL_RCC_OscConfig+0x2cc>)
 80017b6:	b1b2      	cbz	r2, 80017e6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017bc:	f7fe fede 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	4d6c      	ldr	r5, [pc, #432]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80017c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	0798      	lsls	r0, r3, #30
 80017c8:	d507      	bpl.n	80017da <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	682b      	ldr	r3, [r5, #0]
 80017cc:	6922      	ldr	r2, [r4, #16]
 80017ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017d6:	602b      	str	r3, [r5, #0]
 80017d8:	e774      	b.n	80016c4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017da:	f7fe fecf 	bl	800057c <HAL_GetTick>
 80017de:	1b80      	subs	r0, r0, r6
 80017e0:	2802      	cmp	r0, #2
 80017e2:	d9ef      	bls.n	80017c4 <HAL_RCC_OscConfig+0x118>
 80017e4:	e7a7      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80017e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017e8:	f7fe fec8 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ec:	4d61      	ldr	r5, [pc, #388]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80017ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f0:	682b      	ldr	r3, [r5, #0]
 80017f2:	0799      	lsls	r1, r3, #30
 80017f4:	f57f af66 	bpl.w	80016c4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f8:	f7fe fec0 	bl	800057c <HAL_GetTick>
 80017fc:	1b80      	subs	r0, r0, r6
 80017fe:	2802      	cmp	r0, #2
 8001800:	d9f6      	bls.n	80017f0 <HAL_RCC_OscConfig+0x144>
 8001802:	e798      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001804:	6962      	ldr	r2, [r4, #20]
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x2d0>)
 8001808:	b17a      	cbz	r2, 800182a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800180e:	f7fe feb5 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	4d58      	ldr	r5, [pc, #352]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001814:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001818:	079f      	lsls	r7, r3, #30
 800181a:	f53f af57 	bmi.w	80016cc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181e:	f7fe fead 	bl	800057c <HAL_GetTick>
 8001822:	1b80      	subs	r0, r0, r6
 8001824:	2802      	cmp	r0, #2
 8001826:	d9f6      	bls.n	8001816 <HAL_RCC_OscConfig+0x16a>
 8001828:	e785      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800182a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800182c:	f7fe fea6 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	4d50      	ldr	r5, [pc, #320]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001832:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001836:	0798      	lsls	r0, r3, #30
 8001838:	f57f af48 	bpl.w	80016cc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183c:	f7fe fe9e 	bl	800057c <HAL_GetTick>
 8001840:	1b80      	subs	r0, r0, r6
 8001842:	2802      	cmp	r0, #2
 8001844:	d9f6      	bls.n	8001834 <HAL_RCC_OscConfig+0x188>
 8001846:	e776      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001848:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 800184a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800184c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001850:	d128      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	9201      	str	r2, [sp, #4]
 8001854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001856:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001866:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	4d45      	ldr	r5, [pc, #276]	; (8001980 <HAL_RCC_OscConfig+0x2d4>)
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	05d9      	lsls	r1, r3, #23
 800186e:	d51b      	bpl.n	80018a8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	68a3      	ldr	r3, [r4, #8]
 8001872:	4d40      	ldr	r5, [pc, #256]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 8001874:	2b01      	cmp	r3, #1
 8001876:	d127      	bne.n	80018c8 <HAL_RCC_OscConfig+0x21c>
 8001878:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001880:	f7fe fe7c 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4d3b      	ldr	r5, [pc, #236]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001886:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800188e:	079b      	lsls	r3, r3, #30
 8001890:	d539      	bpl.n	8001906 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001892:	2e00      	cmp	r6, #0
 8001894:	f43f af1e 	beq.w	80016d4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001898:	4a36      	ldr	r2, [pc, #216]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 800189a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800189c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	e717      	b.n	80016d4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80018a4:	2600      	movs	r6, #0
 80018a6:	e7df      	b.n	8001868 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018b0:	f7fe fe64 	bl	800057c <HAL_GetTick>
 80018b4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	682b      	ldr	r3, [r5, #0]
 80018b8:	05da      	lsls	r2, r3, #23
 80018ba:	d4d9      	bmi.n	8001870 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018bc:	f7fe fe5e 	bl	800057c <HAL_GetTick>
 80018c0:	1bc0      	subs	r0, r0, r7
 80018c2:	2802      	cmp	r0, #2
 80018c4:	d9f7      	bls.n	80018b6 <HAL_RCC_OscConfig+0x20a>
 80018c6:	e736      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d104      	bne.n	80018d6 <HAL_RCC_OscConfig+0x22a>
 80018cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	672b      	str	r3, [r5, #112]	; 0x70
 80018d4:	e7d0      	b.n	8001878 <HAL_RCC_OscConfig+0x1cc>
 80018d6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	672a      	str	r2, [r5, #112]	; 0x70
 80018de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018e0:	f022 0204 	bic.w	r2, r2, #4
 80018e4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ca      	bne.n	8001880 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80018ea:	f7fe fe47 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018f2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018f6:	0798      	lsls	r0, r3, #30
 80018f8:	d5cb      	bpl.n	8001892 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7fe fe3f 	bl	800057c <HAL_GetTick>
 80018fe:	1bc0      	subs	r0, r0, r7
 8001900:	4540      	cmp	r0, r8
 8001902:	d9f7      	bls.n	80018f4 <HAL_RCC_OscConfig+0x248>
 8001904:	e717      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7fe fe39 	bl	800057c <HAL_GetTick>
 800190a:	1bc0      	subs	r0, r0, r7
 800190c:	4540      	cmp	r0, r8
 800190e:	d9bd      	bls.n	800188c <HAL_RCC_OscConfig+0x1e0>
 8001910:	e711      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001912:	4d18      	ldr	r5, [pc, #96]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
 8001914:	68ab      	ldr	r3, [r5, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b08      	cmp	r3, #8
 800191c:	d047      	beq.n	80019ae <HAL_RCC_OscConfig+0x302>
 800191e:	4e19      	ldr	r6, [pc, #100]	; (8001984 <HAL_RCC_OscConfig+0x2d8>)
 8001920:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001922:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001924:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001926:	d135      	bne.n	8001994 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001928:	f7fe fe28 	bl	800057c <HAL_GetTick>
 800192c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	682b      	ldr	r3, [r5, #0]
 8001930:	0199      	lsls	r1, r3, #6
 8001932:	d429      	bmi.n	8001988 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001934:	6a22      	ldr	r2, [r4, #32]
 8001936:	69e3      	ldr	r3, [r4, #28]
 8001938:	4313      	orrs	r3, r2
 800193a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800193c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001940:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001942:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001946:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001948:	4c0a      	ldr	r4, [pc, #40]	; (8001974 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194a:	0852      	lsrs	r2, r2, #1
 800194c:	3a01      	subs	r2, #1
 800194e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001952:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001954:	2301      	movs	r3, #1
 8001956:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001958:	f7fe fe10 	bl	800057c <HAL_GetTick>
 800195c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	019a      	lsls	r2, r3, #6
 8001962:	f53f aebb 	bmi.w	80016dc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001966:	f7fe fe09 	bl	800057c <HAL_GetTick>
 800196a:	1b40      	subs	r0, r0, r5
 800196c:	2802      	cmp	r0, #2
 800196e:	d9f6      	bls.n	800195e <HAL_RCC_OscConfig+0x2b2>
 8001970:	e6e1      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	42470000 	.word	0x42470000
 800197c:	42470e80 	.word	0x42470e80
 8001980:	40007000 	.word	0x40007000
 8001984:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001988:	f7fe fdf8 	bl	800057c <HAL_GetTick>
 800198c:	1bc0      	subs	r0, r0, r7
 800198e:	2802      	cmp	r0, #2
 8001990:	d9cd      	bls.n	800192e <HAL_RCC_OscConfig+0x282>
 8001992:	e6d0      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001994:	f7fe fdf2 	bl	800057c <HAL_GetTick>
 8001998:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	682b      	ldr	r3, [r5, #0]
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	f57f ae9d 	bpl.w	80016dc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7fe fdeb 	bl	800057c <HAL_GetTick>
 80019a6:	1b00      	subs	r0, r0, r4
 80019a8:	2802      	cmp	r0, #2
 80019aa:	d9f6      	bls.n	800199a <HAL_RCC_OscConfig+0x2ee>
 80019ac:	e6c3      	b.n	8001736 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ae:	2801      	cmp	r0, #1
 80019b0:	f43f aec2 	beq.w	8001738 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 80019b4:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	69e3      	ldr	r3, [r4, #28]
 80019b8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80019bc:	429a      	cmp	r2, r3
 80019be:	f47f ae79 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
 80019c2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f47f ae73 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d4:	4003      	ands	r3, r0
 80019d6:	4293      	cmp	r3, r2
 80019d8:	f47f ae6c 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019de:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019e2:	4293      	cmp	r3, r2
 80019e4:	f47f ae66 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019ea:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80019ee:	1ac0      	subs	r0, r0, r3
 80019f0:	bf18      	it	ne
 80019f2:	2001      	movne	r0, #1
 80019f4:	e6a0      	b.n	8001738 <HAL_RCC_OscConfig+0x8c>
 80019f6:	bf00      	nop

080019f8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f8:	4910      	ldr	r1, [pc, #64]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x44>)
{
 80019fa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fc:	688b      	ldr	r3, [r1, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d118      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a08:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	6849      	ldr	r1, [r1, #4]
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a16:	bf18      	it	ne
 8001a18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1e:	fba1 0100 	umull	r0, r1, r1, r0
 8001a22:	f7fe fbd9 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x44>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a2e:	3301      	adds	r3, #1
 8001a30:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001a32:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a36:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001a38:	4801      	ldr	r0, [pc, #4]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a3a:	bd08      	pop	{r3, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400

08001a44 <HAL_RCC_ClockConfig>:
{
 8001a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	b910      	cbnz	r0, 8001a54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a4e:	2001      	movs	r0, #1
 8001a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_RCC_ClockConfig+0x124>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	f002 020f 	and.w	r2, r2, #15
 8001a5c:	428a      	cmp	r2, r1
 8001a5e:	d329      	bcc.n	8001ab4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	6821      	ldr	r1, [r4, #0]
 8001a62:	078f      	lsls	r7, r1, #30
 8001a64:	d42e      	bmi.n	8001ac4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	07c8      	lsls	r0, r1, #31
 8001a68:	d441      	bmi.n	8001aee <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <HAL_RCC_ClockConfig+0x124>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f002 020f 	and.w	r2, r2, #15
 8001a72:	4295      	cmp	r5, r2
 8001a74:	d367      	bcc.n	8001b46 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a76:	6822      	ldr	r2, [r4, #0]
 8001a78:	0751      	lsls	r1, r2, #29
 8001a7a:	d46d      	bmi.n	8001b58 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	0713      	lsls	r3, r2, #28
 8001a7e:	d507      	bpl.n	8001a90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a80:	4a3a      	ldr	r2, [pc, #232]	; (8001b6c <HAL_RCC_ClockConfig+0x128>)
 8001a82:	6921      	ldr	r1, [r4, #16]
 8001a84:	6893      	ldr	r3, [r2, #8]
 8001a86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a90:	f7ff ffb2 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_RCC_ClockConfig+0x128>)
 8001a96:	4a36      	ldr	r2, [pc, #216]	; (8001b70 <HAL_RCC_ClockConfig+0x12c>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	40d8      	lsrs	r0, r3
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_ClockConfig+0x130>)
 8001aa4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_RCC_ClockConfig+0x134>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	f7fe fd1d 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8001aae:	2000      	movs	r0, #0
 8001ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab4:	b2ca      	uxtb	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	4299      	cmp	r1, r3
 8001ac0:	d1c5      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xa>
 8001ac2:	e7cd      	b.n	8001a60 <HAL_RCC_ClockConfig+0x1c>
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aca:	bf1e      	ittt	ne
 8001acc:	689a      	ldrne	r2, [r3, #8]
 8001ace:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001ad2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad6:	bf42      	ittt	mi
 8001ad8:	689a      	ldrmi	r2, [r3, #8]
 8001ada:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001ade:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	68a0      	ldr	r0, [r4, #8]
 8001ae4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e7bb      	b.n	8001a66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	6862      	ldr	r2, [r4, #4]
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_RCC_ClockConfig+0x128>)
 8001af2:	2a01      	cmp	r2, #1
 8001af4:	d11d      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	d0a7      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	4e1b      	ldr	r6, [pc, #108]	; (8001b6c <HAL_RCC_ClockConfig+0x128>)
 8001b00:	68b3      	ldr	r3, [r6, #8]
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b0a:	f7fe fd37 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b12:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b14:	68b3      	ldr	r3, [r6, #8]
 8001b16:	6862      	ldr	r2, [r4, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b20:	d0a3      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b22:	f7fe fd2b 	bl	800057c <HAL_GetTick>
 8001b26:	1bc0      	subs	r0, r0, r7
 8001b28:	4540      	cmp	r0, r8
 8001b2a:	d9f3      	bls.n	8001b14 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001b2c:	2003      	movs	r0, #3
}
 8001b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b32:	1e91      	subs	r1, r2, #2
 8001b34:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b38:	d802      	bhi.n	8001b40 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b3e:	e7dd      	b.n	8001afc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	f013 0f02 	tst.w	r3, #2
 8001b44:	e7da      	b.n	8001afc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	b2ea      	uxtb	r2, r5
 8001b48:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	429d      	cmp	r5, r3
 8001b52:	f47f af7c 	bne.w	8001a4e <HAL_RCC_ClockConfig+0xa>
 8001b56:	e78e      	b.n	8001a76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4904      	ldr	r1, [pc, #16]	; (8001b6c <HAL_RCC_ClockConfig+0x128>)
 8001b5a:	68e0      	ldr	r0, [r4, #12]
 8001b5c:	688b      	ldr	r3, [r1, #8]
 8001b5e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b62:	4303      	orrs	r3, r0
 8001b64:	608b      	str	r3, [r1, #8]
 8001b66:	e789      	b.n	8001a7c <HAL_RCC_ClockConfig+0x38>
 8001b68:	40023c00 	.word	0x40023c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08002f55 	.word	0x08002f55
 8001b74:	20000008 	.word	0x20000008
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b8a:	6810      	ldr	r0, [r2, #0]
}
 8001b8c:	40d8      	lsrs	r0, r3
 8001b8e:	4770      	bx	lr
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08002f65 	.word	0x08002f65
 8001b98:	20000008 	.word	0x20000008

08001b9c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001baa:	6810      	ldr	r0, [r2, #0]
}
 8001bac:	40d8      	lsrs	r0, r3
 8001bae:	4770      	bx	lr
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	08002f65 	.word	0x08002f65
 8001bb8:	20000008 	.word	0x20000008

08001bbc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bbc:	6a03      	ldr	r3, [r0, #32]
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bc4:	6a03      	ldr	r3, [r0, #32]
{
 8001bc6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bc8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001bd2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bd4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001bd6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001bda:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bdc:	4d0a      	ldr	r5, [pc, #40]	; (8001c08 <TIM_OC1_SetConfig+0x4c>)
 8001bde:	42a8      	cmp	r0, r5
 8001be0:	d10b      	bne.n	8001bfa <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001be2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001be4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001be6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001bea:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bec:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bf2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bf8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bfa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bfc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bfe:	684a      	ldr	r2, [r1, #4]
 8001c00:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c02:	6203      	str	r3, [r0, #32]
 8001c04:	bd70      	pop	{r4, r5, r6, pc}
 8001c06:	bf00      	nop
 8001c08:	40010000 	.word	0x40010000

08001c0c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c0c:	6a03      	ldr	r3, [r0, #32]
 8001c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c14:	6a03      	ldr	r3, [r0, #32]
{
 8001c16:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c1a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c1e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c22:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c24:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001c26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c2e:	4d0b      	ldr	r5, [pc, #44]	; (8001c5c <TIM_OC3_SetConfig+0x50>)
 8001c30:	42a8      	cmp	r0, r5
 8001c32:	d10d      	bne.n	8001c50 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c34:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c36:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c3c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c40:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c42:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c46:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c4c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c50:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c52:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c54:	684a      	ldr	r2, [r1, #4]
 8001c56:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c58:	6203      	str	r3, [r0, #32]
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
 8001c5c:	40010000 	.word	0x40010000

08001c60 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c60:	6a03      	ldr	r3, [r0, #32]
 8001c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c66:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c68:	6a03      	ldr	r3, [r0, #32]
{
 8001c6a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c6e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c72:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c7a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c80:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c84:	4d06      	ldr	r5, [pc, #24]	; (8001ca0 <TIM_OC4_SetConfig+0x40>)
 8001c86:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c88:	bf02      	ittt	eq
 8001c8a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c8c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c90:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c94:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c96:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c98:	684a      	ldr	r2, [r1, #4]
 8001c9a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c9c:	6203      	str	r3, [r0, #32]
 8001c9e:	bd30      	pop	{r4, r5, pc}
 8001ca0:	40010000 	.word	0x40010000

08001ca4 <HAL_TIM_PWM_MspInit>:
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_TIM_PeriodElapsedCallback>:
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_TIM_OC_DelayElapsedCallback>:
 8001ca8:	4770      	bx	lr

08001caa <HAL_TIM_IC_CaptureCallback>:
 8001caa:	4770      	bx	lr

08001cac <HAL_TIM_PWM_PulseFinishedCallback>:
 8001cac:	4770      	bx	lr

08001cae <HAL_TIM_TriggerCallback>:
 8001cae:	4770      	bx	lr

08001cb0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb0:	6803      	ldr	r3, [r0, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	0791      	lsls	r1, r2, #30
{
 8001cb6:	b510      	push	{r4, lr}
 8001cb8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cba:	d50e      	bpl.n	8001cda <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	0792      	lsls	r2, r2, #30
 8001cc0:	d50b      	bpl.n	8001cda <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc2:	f06f 0202 	mvn.w	r2, #2
 8001cc6:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cca:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ccc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd0:	d077      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	f7ff ffea 	bl	8001caa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	0750      	lsls	r0, r2, #29
 8001ce0:	d510      	bpl.n	8001d04 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	0751      	lsls	r1, r2, #29
 8001ce6:	d50d      	bpl.n	8001d04 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce8:	f06f 0204 	mvn.w	r2, #4
 8001cec:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf0:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cfa:	d068      	beq.n	8001dce <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfc:	f7ff ffd5 	bl	8001caa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d00:	2300      	movs	r3, #0
 8001d02:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	0712      	lsls	r2, r2, #28
 8001d0a:	d50f      	bpl.n	8001d2c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	0710      	lsls	r0, r2, #28
 8001d10:	d50c      	bpl.n	8001d2c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d12:	f06f 0208 	mvn.w	r2, #8
 8001d16:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d18:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d1c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001d20:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d22:	d05a      	beq.n	8001dda <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d24:	f7ff ffc1 	bl	8001caa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	06d2      	lsls	r2, r2, #27
 8001d32:	d510      	bpl.n	8001d56 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	06d0      	lsls	r0, r2, #27
 8001d38:	d50d      	bpl.n	8001d56 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d3a:	f06f 0210 	mvn.w	r2, #16
 8001d3e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d40:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d42:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d44:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d48:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d4c:	d04b      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	f7ff ffac 	bl	8001caa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	2300      	movs	r3, #0
 8001d54:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	07d1      	lsls	r1, r2, #31
 8001d5c:	d508      	bpl.n	8001d70 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	07d2      	lsls	r2, r2, #31
 8001d62:	d505      	bpl.n	8001d70 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d64:	f06f 0201 	mvn.w	r2, #1
 8001d68:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff ff9b 	bl	8001ca6 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	0610      	lsls	r0, r2, #24
 8001d76:	d508      	bpl.n	8001d8a <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	0611      	lsls	r1, r2, #24
 8001d7c:	d505      	bpl.n	8001d8a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d84:	4620      	mov	r0, r4
 8001d86:	f000 fa6a 	bl	800225e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	0652      	lsls	r2, r2, #25
 8001d90:	d508      	bpl.n	8001da4 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	0650      	lsls	r0, r2, #25
 8001d96:	d505      	bpl.n	8001da4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d9c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff ff85 	bl	8001cae <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	0691      	lsls	r1, r2, #26
 8001daa:	d522      	bpl.n	8001df2 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	0692      	lsls	r2, r2, #26
 8001db0:	d51f      	bpl.n	8001df2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001db6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db8:	611a      	str	r2, [r3, #16]
}
 8001dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001dbe:	f000 ba4d 	b.w	800225c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	f7ff ff71 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff ff70 	bl	8001cac <HAL_TIM_PWM_PulseFinishedCallback>
 8001dcc:	e783      	b.n	8001cd6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	f7ff ff6b 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7ff ff6a 	bl	8001cac <HAL_TIM_PWM_PulseFinishedCallback>
 8001dd8:	e792      	b.n	8001d00 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	f7ff ff65 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ff64 	bl	8001cac <HAL_TIM_PWM_PulseFinishedCallback>
 8001de4:	e7a0      	b.n	8001d28 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	f7ff ff5f 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff ff5e 	bl	8001cac <HAL_TIM_PWM_PulseFinishedCallback>
 8001df0:	e7af      	b.n	8001d52 <HAL_TIM_IRQHandler+0xa2>
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df4:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001df6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df8:	4290      	cmp	r0, r2
 8001dfa:	d00e      	beq.n	8001e1a <TIM_Base_SetConfig+0x26>
 8001dfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e00:	d00b      	beq.n	8001e1a <TIM_Base_SetConfig+0x26>
 8001e02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e06:	4290      	cmp	r0, r2
 8001e08:	d007      	beq.n	8001e1a <TIM_Base_SetConfig+0x26>
 8001e0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e0e:	4290      	cmp	r0, r2
 8001e10:	d003      	beq.n	8001e1a <TIM_Base_SetConfig+0x26>
 8001e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e16:	4290      	cmp	r0, r2
 8001e18:	d115      	bne.n	8001e46 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001e1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e20:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <TIM_Base_SetConfig+0x94>)
 8001e24:	4290      	cmp	r0, r2
 8001e26:	d019      	beq.n	8001e5c <TIM_Base_SetConfig+0x68>
 8001e28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e2c:	d016      	beq.n	8001e5c <TIM_Base_SetConfig+0x68>
 8001e2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e32:	4290      	cmp	r0, r2
 8001e34:	d012      	beq.n	8001e5c <TIM_Base_SetConfig+0x68>
 8001e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e3a:	4290      	cmp	r0, r2
 8001e3c:	d00e      	beq.n	8001e5c <TIM_Base_SetConfig+0x68>
 8001e3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e42:	4290      	cmp	r0, r2
 8001e44:	d00a      	beq.n	8001e5c <TIM_Base_SetConfig+0x68>
 8001e46:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <TIM_Base_SetConfig+0x98>)
 8001e48:	4290      	cmp	r0, r2
 8001e4a:	d007      	beq.n	8001e5c <TIM_Base_SetConfig+0x68>
 8001e4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e50:	4290      	cmp	r0, r2
 8001e52:	d003      	beq.n	8001e5c <TIM_Base_SetConfig+0x68>
 8001e54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e58:	4290      	cmp	r0, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e5c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e62:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e64:	694a      	ldr	r2, [r1, #20]
 8001e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e6a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e6e:	688b      	ldr	r3, [r1, #8]
 8001e70:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001e72:	680b      	ldr	r3, [r1, #0]
 8001e74:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <TIM_Base_SetConfig+0x94>)
 8001e78:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001e7a:	bf04      	itt	eq
 8001e7c:	690b      	ldreq	r3, [r1, #16]
 8001e7e:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001e80:	2301      	movs	r3, #1
 8001e82:	6143      	str	r3, [r0, #20]
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40014000 	.word	0x40014000

08001e90 <HAL_TIM_Base_Init>:
{
 8001e90:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001e92:	4604      	mov	r4, r0
 8001e94:	b1a0      	cbz	r0, 8001ec0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e9e:	b91b      	cbnz	r3, 8001ea8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ea0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ea4:	f000 fec4 	bl	8002c30 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eae:	6820      	ldr	r0, [r4, #0]
 8001eb0:	1d21      	adds	r1, r4, #4
 8001eb2:	f7ff ff9f 	bl	8001df4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ec0:	2001      	movs	r0, #1
}
 8001ec2:	bd10      	pop	{r4, pc}

08001ec4 <HAL_TIM_PWM_Init>:
{
 8001ec4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	b1a0      	cbz	r0, 8001ef4 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001eca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ece:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed2:	b91b      	cbnz	r3, 8001edc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ed4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001ed8:	f7ff fee4 	bl	8001ca4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	1d21      	adds	r1, r4, #4
 8001ee6:	f7ff ff85 	bl	8001df4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ef4:	2001      	movs	r0, #1
}
 8001ef6:	bd10      	pop	{r4, pc}

08001ef8 <HAL_TIM_Encoder_Init>:
{
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	460c      	mov	r4, r1
  if (htim == NULL)
 8001efc:	4605      	mov	r5, r0
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d043      	beq.n	8001f8a <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f0a:	b91b      	cbnz	r3, 8001f14 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001f0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001f10:	f000 fe20 	bl	8002b54 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f14:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8001f16:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f18:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f20:	6883      	ldr	r3, [r0, #8]
 8001f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f26:	f023 0307 	bic.w	r3, r3, #7
 8001f2a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2c:	f7ff ff62 	bl	8001df4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001f30:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001f32:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001f34:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001f36:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001f38:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8001f3a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001f3c:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001f3e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001f40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f44:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001f48:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001f4c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f4e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f52:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f54:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f5c:	68e1      	ldr	r1, [r4, #12]
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f62:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f66:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001f6a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f6c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001f6e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f72:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001f74:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f76:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001f7a:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f7c:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 8001f7e:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001f80:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8001f82:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8001f86:	2000      	movs	r0, #0
 8001f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f8a:	2001      	movs	r0, #1
}
 8001f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f90 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f90:	6a03      	ldr	r3, [r0, #32]
 8001f92:	f023 0310 	bic.w	r3, r3, #16
 8001f96:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001f98:	6a03      	ldr	r3, [r0, #32]
{
 8001f9a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001f9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001f9e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fa0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fa2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fa6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001faa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001fac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fb4:	4d0b      	ldr	r5, [pc, #44]	; (8001fe4 <TIM_OC2_SetConfig+0x54>)
 8001fb6:	42a8      	cmp	r0, r5
 8001fb8:	d10d      	bne.n	8001fd6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fba:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fbc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fc2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fc6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fc8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fcc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fd2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001fd6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001fd8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001fda:	684a      	ldr	r2, [r1, #4]
 8001fdc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001fde:	6203      	str	r3, [r0, #32]
 8001fe0:	bd70      	pop	{r4, r5, r6, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <HAL_TIM_PWM_ConfigChannel>:
{
 8001fe8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001fea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fee:	2b01      	cmp	r3, #1
{
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ff6:	d025      	beq.n	8002044 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002002:	2a0c      	cmp	r2, #12
 8002004:	d818      	bhi.n	8002038 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002006:	e8df f002 	tbb	[pc, r2]
 800200a:	1707      	.short	0x1707
 800200c:	171e1717 	.word	0x171e1717
 8002010:	172f1717 	.word	0x172f1717
 8002014:	1717      	.short	0x1717
 8002016:	40          	.byte	0x40
 8002017:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002018:	6820      	ldr	r0, [r4, #0]
 800201a:	f7ff fdcf 	bl	8001bbc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800201e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002020:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	f042 0208 	orr.w	r2, r2, #8
 8002028:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	f022 0204 	bic.w	r2, r2, #4
 8002030:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002036:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002038:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800203a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800203c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002040:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002044:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002046:	6820      	ldr	r0, [r4, #0]
 8002048:	f7ff ffa2 	bl	8001f90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800204c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800204e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800205e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002066:	e7e6      	b.n	8002036 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	f7ff fdcf 	bl	8001c0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800206e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002070:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	f042 0208 	orr.w	r2, r2, #8
 8002078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	f022 0204 	bic.w	r2, r2, #4
 8002080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002086:	61da      	str	r2, [r3, #28]
      break;
 8002088:	e7d6      	b.n	8002038 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800208a:	6820      	ldr	r0, [r4, #0]
 800208c:	f7ff fde8 	bl	8001c60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002090:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002092:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020aa:	e7ec      	b.n	8002086 <HAL_TIM_PWM_ConfigChannel+0x9e>

080020ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020ac:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ae:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80020ba:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020bc:	6083      	str	r3, [r0, #8]
 80020be:	bd10      	pop	{r4, pc}

080020c0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80020c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020c4:	2b01      	cmp	r3, #1
{
 80020c6:	b570      	push	{r4, r5, r6, lr}
 80020c8:	4604      	mov	r4, r0
 80020ca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80020ce:	d019      	beq.n	8002104 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80020d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80020d6:	2301      	movs	r3, #1
 80020d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80020dc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80020e6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80020e8:	680b      	ldr	r3, [r1, #0]
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d065      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0xfa>
 80020ee:	d815      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x5c>
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d00c      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x4e>
 80020f4:	d807      	bhi.n	8002106 <HAL_TIM_ConfigClockSource+0x46>
 80020f6:	b153      	cbz	r3, 800210e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80020f8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80020fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80020fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002100:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002104:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002106:	2b20      	cmp	r3, #32
 8002108:	d001      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x4e>
 800210a:	2b30      	cmp	r3, #48	; 0x30
 800210c:	d1f4      	bne.n	80020f8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800210e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002110:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002114:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002118:	4313      	orrs	r3, r2
 800211a:	e01a      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800211c:	2b60      	cmp	r3, #96	; 0x60
 800211e:	d034      	beq.n	800218a <HAL_TIM_ConfigClockSource+0xca>
 8002120:	d819      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x96>
 8002122:	2b50      	cmp	r3, #80	; 0x50
 8002124:	d1e8      	bne.n	80020f8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002126:	684a      	ldr	r2, [r1, #4]
 8002128:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800212a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212c:	6a05      	ldr	r5, [r0, #32]
 800212e:	f025 0501 	bic.w	r5, r5, #1
 8002132:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002134:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002136:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800213a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800213e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002142:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002144:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002146:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002148:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800214e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002152:	6083      	str	r3, [r0, #8]
 8002154:	e7d0      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002156:	2b70      	cmp	r3, #112	; 0x70
 8002158:	d00c      	beq.n	8002174 <HAL_TIM_ConfigClockSource+0xb4>
 800215a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215e:	d1cb      	bne.n	80020f8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002160:	68cb      	ldr	r3, [r1, #12]
 8002162:	684a      	ldr	r2, [r1, #4]
 8002164:	6889      	ldr	r1, [r1, #8]
 8002166:	f7ff ffa1 	bl	80020ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800216a:	6822      	ldr	r2, [r4, #0]
 800216c:	6893      	ldr	r3, [r2, #8]
 800216e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002172:	e008      	b.n	8002186 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002174:	68cb      	ldr	r3, [r1, #12]
 8002176:	684a      	ldr	r2, [r1, #4]
 8002178:	6889      	ldr	r1, [r1, #8]
 800217a:	f7ff ff97 	bl	80020ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800217e:	6822      	ldr	r2, [r4, #0]
 8002180:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002182:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002186:	6093      	str	r3, [r2, #8]
      break;
 8002188:	e7b6      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800218a:	684d      	ldr	r5, [r1, #4]
 800218c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800218e:	6a01      	ldr	r1, [r0, #32]
 8002190:	f021 0110 	bic.w	r1, r1, #16
 8002194:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002196:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002198:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800219a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800219e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021a6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80021aa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021ac:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021ae:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021b4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80021b8:	e7cb      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ba:	684a      	ldr	r2, [r1, #4]
 80021bc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80021be:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c0:	6a05      	ldr	r5, [r0, #32]
 80021c2:	f025 0501 	bic.w	r5, r5, #1
 80021c6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ca:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80021d6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80021d8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80021da:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021dc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021e2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80021e6:	e7b4      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x92>

080021e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
{
 80021ee:	b530      	push	{r4, r5, lr}
 80021f0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80021f4:	d02d      	beq.n	8002252 <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021fa:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021fc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80021fe:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002200:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8002204:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002206:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8002208:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800220c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800220e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002210:	4c11      	ldr	r4, [pc, #68]	; (8002258 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8002212:	42a3      	cmp	r3, r4
 8002214:	d012      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221a:	d00f      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800221c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8002220:	42a3      	cmp	r3, r4
 8002222:	d00b      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002224:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002228:	42a3      	cmp	r3, r4
 800222a:	d007      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800222c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002230:	42a3      	cmp	r3, r4
 8002232:	d003      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002234:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8002238:	42a3      	cmp	r3, r4
 800223a:	d104      	bne.n	8002246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800223c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800223e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002242:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002246:	2301      	movs	r3, #1
 8002248:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224c:	2300      	movs	r3, #0
 800224e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002252:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002254:	bd30      	pop	{r4, r5, pc}
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000

0800225c <HAL_TIMEx_CommutCallback>:
 800225c:	4770      	bx	lr

0800225e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800225e:	4770      	bx	lr

08002260 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002260:	6803      	ldr	r3, [r0, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002268:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002272:	2320      	movs	r3, #32
 8002274:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002278:	4770      	bx	lr
	...

0800227c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800227c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	68c1      	ldr	r1, [r0, #12]
 8002282:	691a      	ldr	r2, [r3, #16]
{
 8002284:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002286:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800228a:	430a      	orrs	r2, r1
 800228c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800228e:	6925      	ldr	r5, [r4, #16]
 8002290:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002292:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002294:	69c0      	ldr	r0, [r0, #28]
 8002296:	432a      	orrs	r2, r5
 8002298:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800229a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800229e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80022a0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022a4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80022a6:	430a      	orrs	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	69a1      	ldr	r1, [r4, #24]
 80022ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022b2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	4a25      	ldr	r2, [pc, #148]	; (8002350 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022bc:	d129      	bne.n	8002312 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022be:	4293      	cmp	r3, r2
 80022c0:	d003      	beq.n	80022ca <UART_SetConfig+0x4e>
 80022c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d120      	bne.n	800230c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022ca:	f7ff fc67 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022ce:	6862      	ldr	r2, [r4, #4]
 80022d0:	6825      	ldr	r5, [r4, #0]
 80022d2:	1892      	adds	r2, r2, r2
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	f04f 0119 	mov.w	r1, #25
 80022dc:	415b      	adcs	r3, r3
 80022de:	fba0 0101 	umull	r0, r1, r0, r1
 80022e2:	f7fd ff79 	bl	80001d8 <__aeabi_uldivmod>
 80022e6:	2164      	movs	r1, #100	; 0x64
 80022e8:	fbb0 f4f1 	udiv	r4, r0, r1
 80022ec:	fb01 0314 	mls	r3, r1, r4, r0
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	3332      	adds	r3, #50	; 0x32
 80022f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f8:	f003 0207 	and.w	r2, r3, #7
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002302:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002306:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002308:	60ab      	str	r3, [r5, #8]
 800230a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800230c:	f7ff fc36 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002310:	e7dd      	b.n	80022ce <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002312:	4293      	cmp	r3, r2
 8002314:	d002      	beq.n	800231c <UART_SetConfig+0xa0>
 8002316:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <UART_SetConfig+0xd8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d116      	bne.n	800234a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800231c:	f7ff fc3e 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002320:	6863      	ldr	r3, [r4, #4]
 8002322:	6825      	ldr	r5, [r4, #0]
 8002324:	2119      	movs	r1, #25
 8002326:	009a      	lsls	r2, r3, #2
 8002328:	fba0 0101 	umull	r0, r1, r0, r1
 800232c:	0f9b      	lsrs	r3, r3, #30
 800232e:	f7fd ff53 	bl	80001d8 <__aeabi_uldivmod>
 8002332:	2264      	movs	r2, #100	; 0x64
 8002334:	fbb0 f1f2 	udiv	r1, r0, r2
 8002338:	fb02 0311 	mls	r3, r2, r1, r0
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	3332      	adds	r3, #50	; 0x32
 8002340:	fbb3 f3f2 	udiv	r3, r3, r2
 8002344:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002348:	e7de      	b.n	8002308 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800234a:	f7ff fc17 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 800234e:	e7e7      	b.n	8002320 <UART_SetConfig+0xa4>
 8002350:	40011000 	.word	0x40011000
 8002354:	40011400 	.word	0x40011400

08002358 <HAL_UART_Init>:
{
 8002358:	b510      	push	{r4, lr}
  if (huart == NULL)
 800235a:	4604      	mov	r4, r0
 800235c:	b340      	cbz	r0, 80023b0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800235e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002362:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002366:	b91b      	cbnz	r3, 8002370 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002368:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800236c:	f000 fd4c 	bl	8002e08 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002370:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002372:	2324      	movs	r3, #36	; 0x24
 8002374:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002378:	68d3      	ldr	r3, [r2, #12]
 800237a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800237e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002380:	4620      	mov	r0, r4
 8002382:	f7ff ff7b 	bl	800227c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800238e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002396:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800239e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80023a2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80023ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023b0:	2001      	movs	r0, #1
}
 80023b2:	bd10      	pop	{r4, pc}

080023b4 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80023b4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d118      	bne.n	80023ee <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80023bc:	b1a9      	cbz	r1, 80023ea <HAL_UART_Transmit_IT+0x36>
 80023be:	b1a2      	cbz	r2, 80023ea <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 80023c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d012      	beq.n	80023ee <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 80023c8:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 80023ca:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80023cc:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80023d0:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d4:	2221      	movs	r2, #33	; 0x21
 80023d6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80023da:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 80023dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80023e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e4:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80023e6:	4618      	mov	r0, r3
 80023e8:	4770      	bx	lr
      return HAL_ERROR;
 80023ea:	2001      	movs	r0, #1
 80023ec:	4770      	bx	lr
    return HAL_BUSY;
 80023ee:	2002      	movs	r0, #2
}
 80023f0:	4770      	bx	lr

080023f2 <HAL_UART_TxCpltCallback>:
 80023f2:	4770      	bx	lr

080023f4 <HAL_UART_RxCpltCallback>:
 80023f4:	4770      	bx	lr

080023f6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023f6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80023fa:	2b22      	cmp	r3, #34	; 0x22
{
 80023fc:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023fe:	d136      	bne.n	800246e <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002400:	6883      	ldr	r3, [r0, #8]
 8002402:	6901      	ldr	r1, [r0, #16]
 8002404:	6802      	ldr	r2, [r0, #0]
 8002406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800240c:	d123      	bne.n	8002456 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800240e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002410:	b9e9      	cbnz	r1, 800244e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002416:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800241a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800241c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800241e:	3c01      	subs	r4, #1
 8002420:	b2a4      	uxth	r4, r4
 8002422:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002424:	b98c      	cbnz	r4, 800244a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002426:	6803      	ldr	r3, [r0, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	f022 0220 	bic.w	r2, r2, #32
 800242e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002436:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002440:	2320      	movs	r3, #32
 8002442:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002446:	f7ff ffd5 	bl	80023f4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800244a:	2000      	movs	r0, #0
}
 800244c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f823 2b01 	strh.w	r2, [r3], #1
 8002454:	e7e1      	b.n	800241a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002456:	b921      	cbnz	r1, 8002462 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002458:	1c59      	adds	r1, r3, #1
 800245a:	6852      	ldr	r2, [r2, #4]
 800245c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	e7dc      	b.n	800241c <UART_Receive_IT+0x26>
 8002462:	6852      	ldr	r2, [r2, #4]
 8002464:	1c59      	adds	r1, r3, #1
 8002466:	6281      	str	r1, [r0, #40]	; 0x28
 8002468:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800246c:	e7f7      	b.n	800245e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800246e:	2002      	movs	r0, #2
 8002470:	bd10      	pop	{r4, pc}

08002472 <HAL_UART_ErrorCallback>:
 8002472:	4770      	bx	lr

08002474 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002474:	6803      	ldr	r3, [r0, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002478:	68d9      	ldr	r1, [r3, #12]
{
 800247a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800247c:	0716      	lsls	r6, r2, #28
{
 800247e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002480:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002482:	d107      	bne.n	8002494 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002484:	0696      	lsls	r6, r2, #26
 8002486:	d55c      	bpl.n	8002542 <HAL_UART_IRQHandler+0xce>
 8002488:	068d      	lsls	r5, r1, #26
 800248a:	d55a      	bpl.n	8002542 <HAL_UART_IRQHandler+0xce>
}
 800248c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002490:	f7ff bfb1 	b.w	80023f6 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002494:	f015 0501 	ands.w	r5, r5, #1
 8002498:	d102      	bne.n	80024a0 <HAL_UART_IRQHandler+0x2c>
 800249a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800249e:	d050      	beq.n	8002542 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024a0:	07d0      	lsls	r0, r2, #31
 80024a2:	d505      	bpl.n	80024b0 <HAL_UART_IRQHandler+0x3c>
 80024a4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024a6:	bf42      	ittt	mi
 80024a8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80024aa:	f043 0301 	orrmi.w	r3, r3, #1
 80024ae:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b0:	0756      	lsls	r6, r2, #29
 80024b2:	d504      	bpl.n	80024be <HAL_UART_IRQHandler+0x4a>
 80024b4:	b11d      	cbz	r5, 80024be <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024be:	0790      	lsls	r0, r2, #30
 80024c0:	d504      	bpl.n	80024cc <HAL_UART_IRQHandler+0x58>
 80024c2:	b11d      	cbz	r5, 80024cc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024cc:	0713      	lsls	r3, r2, #28
 80024ce:	d506      	bpl.n	80024de <HAL_UART_IRQHandler+0x6a>
 80024d0:	068e      	lsls	r6, r1, #26
 80024d2:	d400      	bmi.n	80024d6 <HAL_UART_IRQHandler+0x62>
 80024d4:	b11d      	cbz	r5, 80024de <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d066      	beq.n	80025b2 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024e4:	0695      	lsls	r5, r2, #26
 80024e6:	d504      	bpl.n	80024f2 <HAL_UART_IRQHandler+0x7e>
 80024e8:	0688      	lsls	r0, r1, #26
 80024ea:	d502      	bpl.n	80024f2 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff ff82 	bl	80023f6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80024f8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80024fa:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024fc:	d402      	bmi.n	8002504 <HAL_UART_IRQHandler+0x90>
 80024fe:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002502:	d01a      	beq.n	800253a <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8002504:	f7ff feac 	bl	8002260 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	0652      	lsls	r2, r2, #25
 800250e:	d510      	bpl.n	8002532 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002510:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002512:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002518:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800251a:	b150      	cbz	r0, 8002532 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_UART_IRQHandler+0x140>)
 800251e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002520:	f7fe f9f8 	bl	8000914 <HAL_DMA_Abort_IT>
 8002524:	2800      	cmp	r0, #0
 8002526:	d044      	beq.n	80025b2 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002528:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800252a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800252e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002530:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff ff9d 	bl	8002472 <HAL_UART_ErrorCallback>
 8002538:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800253a:	f7ff ff9a 	bl	8002472 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002540:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002542:	0616      	lsls	r6, r2, #24
 8002544:	d527      	bpl.n	8002596 <HAL_UART_IRQHandler+0x122>
 8002546:	060d      	lsls	r5, r1, #24
 8002548:	d525      	bpl.n	8002596 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800254a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800254e:	2a21      	cmp	r2, #33	; 0x21
 8002550:	d12f      	bne.n	80025b2 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002552:	68a2      	ldr	r2, [r4, #8]
 8002554:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002558:	6a22      	ldr	r2, [r4, #32]
 800255a:	d117      	bne.n	800258c <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800255c:	8811      	ldrh	r1, [r2, #0]
 800255e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002562:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002564:	6921      	ldr	r1, [r4, #16]
 8002566:	b979      	cbnz	r1, 8002588 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8002568:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800256a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800256c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800256e:	3a01      	subs	r2, #1
 8002570:	b292      	uxth	r2, r2
 8002572:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002574:	b9ea      	cbnz	r2, 80025b2 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002588:	3201      	adds	r2, #1
 800258a:	e7ee      	b.n	800256a <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800258c:	1c51      	adds	r1, r2, #1
 800258e:	6221      	str	r1, [r4, #32]
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	e7ea      	b.n	800256c <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002596:	0650      	lsls	r0, r2, #25
 8002598:	d50b      	bpl.n	80025b2 <HAL_UART_IRQHandler+0x13e>
 800259a:	064a      	lsls	r2, r1, #25
 800259c:	d509      	bpl.n	80025b2 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025a6:	2320      	movs	r3, #32
 80025a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7ff ff20 	bl	80023f2 <HAL_UART_TxCpltCallback>
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	080025b9 	.word	0x080025b9

080025b8 <UART_DMAAbortOnError>:
{
 80025b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80025bc:	2300      	movs	r3, #0
 80025be:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025c0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80025c2:	f7ff ff56 	bl	8002472 <HAL_UART_ErrorCallback>
 80025c6:	bd08      	pop	{r3, pc}

080025c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80025c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 80025ca:	2210      	movs	r2, #16
 80025cc:	2100      	movs	r1, #0
 80025ce:	4668      	mov	r0, sp
 80025d0:	f000 fca6 	bl	8002f20 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80025d4:	4813      	ldr	r0, [pc, #76]	; (8002624 <MX_ADC1_Init+0x5c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_ADC1_Init+0x60>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <MX_ADC1_Init+0x64>)
 80025da:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025dc:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80025e0:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025e4:	2300      	movs	r3, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80025e6:	2401      	movs	r4, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025e8:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80025ea:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025ec:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025ee:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025f4:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80025f6:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025f8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025fc:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025fe:	f7fd ffd7 	bl	80005b0 <HAL_ADC_Init>
 8002602:	b108      	cbz	r0, 8002608 <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 8002604:	f000 f9bc 	bl	8002980 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002608:	2308      	movs	r3, #8
  sConfig.Rank = 1;
 800260a:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800260e:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002610:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002612:	4804      	ldr	r0, [pc, #16]	; (8002624 <MX_ADC1_Init+0x5c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002614:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002616:	f7fe f871 	bl	80006fc <HAL_ADC_ConfigChannel>
 800261a:	b108      	cbz	r0, 8002620 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 800261c:	f000 f9b0 	bl	8002980 <Error_Handler>
  }

}
 8002620:	b004      	add	sp, #16
 8002622:	bd10      	pop	{r4, pc}
 8002624:	2000002c 	.word	0x2000002c
 8002628:	40012000 	.word	0x40012000
 800262c:	0f000001 	.word	0x0f000001

08002630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002630:	b510      	push	{r4, lr}
 8002632:	4604      	mov	r4, r0
 8002634:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002636:	2214      	movs	r2, #20
 8002638:	2100      	movs	r1, #0
 800263a:	a803      	add	r0, sp, #12
 800263c:	f000 fc70 	bl	8002f20 <memset>
  if(adcHandle->Instance==ADC1)
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_ADC_MspInit+0x58>)
 8002644:	429a      	cmp	r2, r3
 8002646:	d11d      	bne.n	8002684 <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002648:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800264c:	2100      	movs	r1, #0
 800264e:	9101      	str	r1, [sp, #4]
 8002650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = I_MOT2_Pin|I_MOT1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002652:	480e      	ldr	r0, [pc, #56]	; (800268c <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
 800265a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800265c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002660:	9201      	str	r2, [sp, #4]
 8002662:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	9102      	str	r1, [sp, #8]
 8002666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002668:	f042 0202 	orr.w	r2, r2, #2
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	9302      	str	r3, [sp, #8]
 8002676:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I_MOT2_Pin|I_MOT1_Pin;
 800267a:	2303      	movs	r3, #3
 800267c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f7fe f95e 	bl	8000940 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002684:	b008      	add	sp, #32
 8002686:	bd10      	pop	{r4, pc}
 8002688:	40012000 	.word	0x40012000
 800268c:	40020400 	.word	0x40020400

08002690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	2214      	movs	r2, #20
{
 8002696:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	eb0d 0002 	add.w	r0, sp, r2
 800269c:	2100      	movs	r1, #0
 800269e:	f000 fc3f 	bl	8002f20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026a2:	2400      	movs	r4, #0
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <MX_GPIO_Init+0xe4>)
 80026a6:	9401      	str	r4, [sp, #4]
 80026a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80026aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8002780 <MX_GPIO_Init+0xf0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT1_DIR_Pin|MOT1_EN_Pin|MOT2_EN_Pin|DIST1_EN_Pin 
 80026ae:	4f32      	ldr	r7, [pc, #200]	; (8002778 <MX_GPIO_Init+0xe8>)
                          |DIST2_EN_Pin|DIST3_EN_Pin|DIST4_EN_Pin|DIST5_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOT2_DIR_GPIO_Port, MOT2_DIR_Pin, GPIO_PIN_RESET);
 80026b0:	4d32      	ldr	r5, [pc, #200]	; (800277c <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
 80026b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80026be:	9201      	str	r2, [sp, #4]
 80026c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	9402      	str	r4, [sp, #8]
 80026c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c6:	f042 0204 	orr.w	r2, r2, #4
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
 80026cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ce:	f002 0204 	and.w	r2, r2, #4
 80026d2:	9202      	str	r2, [sp, #8]
 80026d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	9403      	str	r4, [sp, #12]
 80026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
 80026e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e2:	f002 0201 	and.w	r2, r2, #1
 80026e6:	9203      	str	r2, [sp, #12]
 80026e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	9404      	str	r4, [sp, #16]
 80026ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ee:	f042 0202 	orr.w	r2, r2, #2
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80026fc:	4622      	mov	r2, r4
 80026fe:	4640      	mov	r0, r8
 8002700:	21e0      	movs	r1, #224	; 0xe0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8002704:	f7fe f9ea 	bl	8000adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MOT1_DIR_Pin|MOT1_EN_Pin|MOT2_EN_Pin|DIST1_EN_Pin 
 8002708:	4622      	mov	r2, r4
 800270a:	4638      	mov	r0, r7
 800270c:	f24e 11f0 	movw	r1, #57840	; 0xe1f0
 8002710:	f7fe f9e4 	bl	8000adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOT2_DIR_GPIO_Port, MOT2_DIR_Pin, GPIO_PIN_RESET);
 8002714:	4622      	mov	r2, r4
 8002716:	4628      	mov	r0, r5
 8002718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800271c:	f7fe f9de 	bl	8000adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin|SW_3_Pin|SW_4_Pin;
 8002720:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002722:	a905      	add	r1, sp, #20
 8002724:	4628      	mov	r0, r5

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002726:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin|SW_3_Pin|SW_4_Pin;
 8002728:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272e:	f7fe f907 	bl	8000940 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8002732:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	a905      	add	r1, sp, #20
 8002736:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8002738:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	f7fe f8fe 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOT1_DIR_Pin|MOT1_EN_Pin|MOT2_EN_Pin|DIST1_EN_Pin 
 8002744:	f24e 13f0 	movw	r3, #57840	; 0xe1f0
                          |DIST2_EN_Pin|DIST3_EN_Pin|DIST4_EN_Pin|DIST5_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	a905      	add	r1, sp, #20
 800274a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = MOT1_DIR_Pin|MOT1_EN_Pin|MOT2_EN_Pin|DIST1_EN_Pin 
 800274c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f7fe f8f4 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOT2_DIR_Pin;
 8002758:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOT2_DIR_GPIO_Port, &GPIO_InitStruct);
 800275c:	a905      	add	r1, sp, #20
 800275e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MOT2_DIR_Pin;
 8002760:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002762:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MOT2_DIR_GPIO_Port, &GPIO_InitStruct);
 8002768:	f7fe f8ea 	bl	8000940 <HAL_GPIO_Init>

}
 800276c:	b00a      	add	sp, #40	; 0x28
 800276e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020000 	.word	0x40020000

08002784 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002784:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8002786:	480c      	ldr	r0, [pc, #48]	; (80027b8 <MX_I2C3_Init+0x34>)
  hi2c3.Init.ClockSpeed = 100000;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_I2C3_Init+0x38>)
 800278a:	f8df e034 	ldr.w	lr, [pc, #52]	; 80027c0 <MX_I2C3_Init+0x3c>
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 100000;
 8002792:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002796:	2300      	movs	r3, #0
 8002798:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800279a:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800279c:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800279e:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80027a0:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a2:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027a6:	f7fe f9d5 	bl	8000b54 <HAL_I2C_Init>
 80027aa:	b118      	cbz	r0, 80027b4 <MX_I2C3_Init+0x30>
  {
    Error_Handler();
  }

}
 80027ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80027b0:	f000 b8e6 	b.w	8002980 <Error_Handler>
 80027b4:	bd08      	pop	{r3, pc}
 80027b6:	bf00      	nop
 80027b8:	20000074 	.word	0x20000074
 80027bc:	40005c00 	.word	0x40005c00
 80027c0:	000186a0 	.word	0x000186a0

080027c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027c8:	4604      	mov	r4, r0
 80027ca:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	2214      	movs	r2, #20
 80027ce:	2100      	movs	r1, #0
 80027d0:	a803      	add	r0, sp, #12
 80027d2:	f000 fba5 	bl	8002f20 <memset>
  if(i2cHandle->Instance==I2C3)
 80027d6:	6822      	ldr	r2, [r4, #0]
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_I2C_MspInit+0xb0>)
 80027da:	429a      	cmp	r2, r3
 80027dc:	d147      	bne.n	800286e <HAL_I2C_MspInit+0xaa>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027de:	4c26      	ldr	r4, [pc, #152]	; (8002878 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Pin = SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 80027e0:	4826      	ldr	r0, [pc, #152]	; (800287c <HAL_I2C_MspInit+0xb8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e2:	2500      	movs	r5, #0
 80027e4:	9500      	str	r5, [sp, #0]
 80027e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6323      	str	r3, [r4, #48]	; 0x30
 80027ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f8:	9501      	str	r5, [sp, #4]
 80027fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6323      	str	r3, [r4, #48]	; 0x30
 8002802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280c:	f04f 0912 	mov.w	r9, #18
    GPIO_InitStruct.Pin = SDA_Pin;
 8002810:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002814:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800281a:	2604      	movs	r6, #4
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800281c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SDA_Pin;
 800281e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002820:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002824:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800282a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800282c:	f7fe f888 	bl	8000940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8002830:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002834:	a903      	add	r1, sp, #12
 8002836:	4812      	ldr	r0, [pc, #72]	; (8002880 <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Pin = SCL_Pin;
 8002838:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283a:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283e:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002844:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002846:	f7fe f87b 	bl	8000940 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800284a:	9502      	str	r5, [sp, #8]
 800284c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800284e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002852:	6423      	str	r3, [r4, #64]	; 0x40
 8002854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800285a:	9302      	str	r3, [sp, #8]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800285c:	2048      	movs	r0, #72	; 0x48
 800285e:	462a      	mov	r2, r5
 8002860:	4629      	mov	r1, r5
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002862:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002864:	f7fd fffe 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002868:	2048      	movs	r0, #72	; 0x48
 800286a:	f7fe f82f 	bl	80008cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800286e:	b009      	add	sp, #36	; 0x24
 8002870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002874:	40005c00 	.word	0x40005c00
 8002878:	40023800 	.word	0x40023800
 800287c:	40020800 	.word	0x40020800
 8002880:	40020000 	.word	0x40020000

08002884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002884:	b530      	push	{r4, r5, lr}
 8002886:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002888:	2230      	movs	r2, #48	; 0x30
 800288a:	2100      	movs	r1, #0
 800288c:	a808      	add	r0, sp, #32
 800288e:	f000 fb47 	bl	8002f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002892:	2100      	movs	r1, #0
 8002894:	2214      	movs	r2, #20
 8002896:	a803      	add	r0, sp, #12
 8002898:	f000 fb42 	bl	8002f20 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	2400      	movs	r4, #0
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <SystemClock_Config+0x88>)
 80028a0:	9401      	str	r4, [sp, #4]
 80028a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <SystemClock_Config+0x8c>)
 80028b6:	9402      	str	r4, [sp, #8]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028c2:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028c8:	9302      	str	r3, [sp, #8]
 80028ca:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028cc:	2301      	movs	r3, #1
 80028ce:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028d0:	2310      	movs	r3, #16
 80028d2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028d4:	2308      	movs	r3, #8
 80028d6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80028d8:	2364      	movs	r3, #100	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028da:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 100;
 80028dc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028de:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028e0:	2304      	movs	r3, #4
 80028e2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e4:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028e8:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ea:	f7fe fedf 	bl	80016ac <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ee:	230f      	movs	r3, #15
 80028f0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028f2:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028f8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028fa:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028fc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028fe:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002900:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002902:	f7ff f89f 	bl	8001a44 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002906:	b015      	add	sp, #84	; 0x54
 8002908:	bd30      	pop	{r4, r5, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000

08002914 <main>:
{
 8002914:	b510      	push	{r4, lr}
  HAL_Init();
 8002916:	f7fd fe0b 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 800291a:	f7ff ffb3 	bl	8002884 <SystemClock_Config>
  MX_GPIO_Init();
 800291e:	f7ff feb7 	bl	8002690 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002922:	f000 fa55 	bl	8002dd0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002926:	f000 f87f 	bl	8002a28 <MX_TIM2_Init>
  MX_TIM5_Init();
 800292a:	f000 f8ad 	bl	8002a88 <MX_TIM5_Init>
  MX_ADC1_Init();
 800292e:	f7ff fe4b 	bl	80025c8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8002932:	f7ff ff27 	bl	8002784 <MX_I2C3_Init>
  MX_TIM3_Init();
 8002936:	f000 f9f3 	bl	8002d20 <MX_TIM3_Init>
  MX_TIM11_Init();
 800293a:	f000 f8f1 	bl	8002b20 <MX_TIM11_Init>
  MX_TIM10_Init();
 800293e:	f000 f8d5 	bl	8002aec <MX_TIM10_Init>
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8002942:	4c0c      	ldr	r4, [pc, #48]	; (8002974 <main+0x60>)
 8002944:	2200      	movs	r2, #0
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	4620      	mov	r0, r4
 800294a:	f7fe f8c7 	bl	8000adc <HAL_GPIO_WritePin>
	  HAL_Delay(333);
 800294e:	f240 104d 	movw	r0, #333	; 0x14d
 8002952:	f7fd fe19 	bl	8000588 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart1,wiad,13);
 8002956:	220d      	movs	r2, #13
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <main+0x64>)
 800295a:	4808      	ldr	r0, [pc, #32]	; (800297c <main+0x68>)
 800295c:	f7ff fd2a 	bl	80023b4 <HAL_UART_Transmit_IT>
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8002960:	4620      	mov	r0, r4
 8002962:	2201      	movs	r2, #1
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	f7fe f8b9 	bl	8000adc <HAL_GPIO_WritePin>
	  HAL_Delay(333);
 800296a:	f240 104d 	movw	r0, #333	; 0x14d
 800296e:	f7fd fe0b 	bl	8000588 <HAL_Delay>
 8002972:	e7e7      	b.n	8002944 <main+0x30>
 8002974:	40020000 	.word	0x40020000
 8002978:	08002f48 	.word	0x08002f48
 800297c:	20000208 	.word	0x20000208

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	4770      	bx	lr
	...

08002984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002984:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_MspInit+0x34>)
 8002988:	2100      	movs	r1, #0
 800298a:	9100      	str	r1, [sp, #0]
 800298c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800298e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
 8002994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002996:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800299a:	9200      	str	r2, [sp, #0]
 800299c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	9101      	str	r1, [sp, #4]
 80029a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b2:	b002      	add	sp, #8
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800

080029bc <NMI_Handler>:
 80029bc:	4770      	bx	lr

080029be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029be:	e7fe      	b.n	80029be <HardFault_Handler>

080029c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c0:	e7fe      	b.n	80029c0 <MemManage_Handler>

080029c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c2:	e7fe      	b.n	80029c2 <BusFault_Handler>

080029c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c4:	e7fe      	b.n	80029c4 <UsageFault_Handler>

080029c6 <SVC_Handler>:
 80029c6:	4770      	bx	lr

080029c8 <DebugMon_Handler>:
 80029c8:	4770      	bx	lr

080029ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ca:	4770      	bx	lr

080029cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029cc:	f7fd bdca 	b.w	8000564 <HAL_IncTick>

080029d0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80029d0:	4801      	ldr	r0, [pc, #4]	; (80029d8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80029d2:	f7ff b96d 	b.w	8001cb0 <HAL_TIM_IRQHandler>
 80029d6:	bf00      	nop
 80029d8:	200000c8 	.word	0x200000c8

080029dc <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80029dc:	4801      	ldr	r0, [pc, #4]	; (80029e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 80029de:	f7ff b967 	b.w	8001cb0 <HAL_TIM_IRQHandler>
 80029e2:	bf00      	nop
 80029e4:	20000188 	.word	0x20000188

080029e8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029e8:	4801      	ldr	r0, [pc, #4]	; (80029f0 <TIM3_IRQHandler+0x8>)
 80029ea:	f7ff b961 	b.w	8001cb0 <HAL_TIM_IRQHandler>
 80029ee:	bf00      	nop
 80029f0:	20000148 	.word	0x20000148

080029f4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f4:	4801      	ldr	r0, [pc, #4]	; (80029fc <USART1_IRQHandler+0x8>)
 80029f6:	f7ff bd3d 	b.w	8002474 <HAL_UART_IRQHandler>
 80029fa:	bf00      	nop
 80029fc:	20000208 	.word	0x20000208

08002a00 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002a00:	4801      	ldr	r0, [pc, #4]	; (8002a08 <I2C3_EV_IRQHandler+0x8>)
 8002a02:	f7fe ba45 	b.w	8000e90 <HAL_I2C_EV_IRQHandler>
 8002a06:	bf00      	nop
 8002a08:	20000074 	.word	0x20000074

08002a0c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <SystemInit+0x18>)
 8002a0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a12:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a2c:	2224      	movs	r2, #36	; 0x24
 8002a2e:	2100      	movs	r1, #0
 8002a30:	a803      	add	r0, sp, #12
 8002a32:	f000 fa75 	bl	8002f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8002a36:	4813      	ldr	r0, [pc, #76]	; (8002a84 <MX_TIM2_Init+0x5c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a38:	2400      	movs	r4, #0
  htim2.Instance = TIM2;
 8002a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8002a3e:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
 8002a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a46:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a48:	2303      	movs	r3, #3
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a4a:	2201      	movs	r2, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a4c:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 15;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 15;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a4e:	a903      	add	r1, sp, #12
  sConfig.IC1Filter = 15;
 8002a50:	230f      	movs	r3, #15
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a52:	9401      	str	r4, [sp, #4]
 8002a54:	9402      	str	r4, [sp, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a56:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a58:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5a:	6184      	str	r4, [r0, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5c:	9205      	str	r2, [sp, #20]
  sConfig.IC1Filter = 15;
 8002a5e:	9307      	str	r3, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a60:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 15;
 8002a62:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a64:	f7ff fa48 	bl	8001ef8 <HAL_TIM_Encoder_Init>
 8002a68:	b108      	cbz	r0, 8002a6e <MX_TIM2_Init+0x46>
  {
    Error_Handler();
 8002a6a:	f7ff ff89 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6e:	a901      	add	r1, sp, #4
 8002a70:	4804      	ldr	r0, [pc, #16]	; (8002a84 <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a72:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a74:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a76:	f7ff fbb7 	bl	80021e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7a:	b108      	cbz	r0, 8002a80 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002a7c:	f7ff ff80 	bl	8002980 <Error_Handler>
  }

}
 8002a80:	b00c      	add	sp, #48	; 0x30
 8002a82:	bd10      	pop	{r4, pc}
 8002a84:	200001c8 	.word	0x200001c8

08002a88 <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a88:	b510      	push	{r4, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a8c:	2224      	movs	r2, #36	; 0x24
 8002a8e:	2100      	movs	r1, #0
 8002a90:	a803      	add	r0, sp, #12
 8002a92:	f000 fa45 	bl	8002f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim5.Instance = TIM5;
 8002a96:	4813      	ldr	r0, [pc, #76]	; (8002ae4 <MX_TIM5_Init+0x5c>)
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <MX_TIM5_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9a:	2400      	movs	r4, #0
  htim5.Init.Prescaler = 0;
 8002a9c:	e880 0018 	stmia.w	r0, {r3, r4}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 65535;
 8002aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa4:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002aa6:	2303      	movs	r3, #3
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aa8:	2201      	movs	r2, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002aaa:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 15;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 15;
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002aac:	a903      	add	r1, sp, #12
  sConfig.IC1Filter = 15;
 8002aae:	230f      	movs	r3, #15
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab0:	9401      	str	r4, [sp, #4]
 8002ab2:	9402      	str	r4, [sp, #8]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	6084      	str	r4, [r0, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	6104      	str	r4, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab8:	6184      	str	r4, [r0, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aba:	9205      	str	r2, [sp, #20]
  sConfig.IC1Filter = 15;
 8002abc:	9307      	str	r3, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002abe:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 15;
 8002ac0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002ac2:	f7ff fa19 	bl	8001ef8 <HAL_TIM_Encoder_Init>
 8002ac6:	b108      	cbz	r0, 8002acc <MX_TIM5_Init+0x44>
  {
    Error_Handler();
 8002ac8:	f7ff ff5a 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002acc:	a901      	add	r1, sp, #4
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_TIM5_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad0:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad2:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ad4:	f7ff fb88 	bl	80021e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	b108      	cbz	r0, 8002ade <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002ada:	f7ff ff51 	bl	8002980 <Error_Handler>
  }

}
 8002ade:	b00c      	add	sp, #48	; 0x30
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000108 	.word	0x20000108
 8002ae8:	40000c00 	.word	0x40000c00

08002aec <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8002aec:	480a      	ldr	r0, [pc, #40]	; (8002b18 <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = 72;
 8002aee:	490b      	ldr	r1, [pc, #44]	; (8002b1c <MX_TIM10_Init+0x30>)
{
 8002af0:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 72;
 8002af2:	2348      	movs	r3, #72	; 0x48
 8002af4:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 10000;
 8002af8:	f242 7210 	movw	r2, #10000	; 0x2710
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afc:	2300      	movs	r3, #0
 8002afe:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 10000;
 8002b00:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b02:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b04:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b06:	f7ff f9c3 	bl	8001e90 <HAL_TIM_Base_Init>
 8002b0a:	b118      	cbz	r0, 8002b14 <MX_TIM10_Init+0x28>
  {
    Error_Handler();
  }

}
 8002b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002b10:	f7ff bf36 	b.w	8002980 <Error_Handler>
 8002b14:	bd08      	pop	{r3, pc}
 8002b16:	bf00      	nop
 8002b18:	200000c8 	.word	0x200000c8
 8002b1c:	40014400 	.word	0x40014400

08002b20 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{

  htim11.Instance = TIM11;
 8002b20:	480a      	ldr	r0, [pc, #40]	; (8002b4c <MX_TIM11_Init+0x2c>)
  htim11.Init.Prescaler = 72;
 8002b22:	490b      	ldr	r1, [pc, #44]	; (8002b50 <MX_TIM11_Init+0x30>)
{
 8002b24:	b508      	push	{r3, lr}
  htim11.Init.Prescaler = 72;
 8002b26:	2348      	movs	r3, #72	; 0x48
 8002b28:	e880 000a 	stmia.w	r0, {r1, r3}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 10000;
 8002b2c:	f242 7210 	movw	r2, #10000	; 0x2710
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	2300      	movs	r3, #0
 8002b32:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 10000;
 8002b34:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b36:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b3a:	f7ff f9a9 	bl	8001e90 <HAL_TIM_Base_Init>
 8002b3e:	b118      	cbz	r0, 8002b48 <MX_TIM11_Init+0x28>
  {
    Error_Handler();
  }

}
 8002b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002b44:	f7ff bf1c 	b.w	8002980 <Error_Handler>
 8002b48:	bd08      	pop	{r3, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000188 	.word	0x20000188
 8002b50:	40014800 	.word	0x40014800

08002b54 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b54:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b56:	2214      	movs	r2, #20
{
 8002b58:	b08a      	sub	sp, #40	; 0x28
 8002b5a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	eb0d 0002 	add.w	r0, sp, r2
 8002b62:	f000 f9dd 	bl	8002f20 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6c:	d137      	bne.n	8002bde <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b6e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002b72:	2400      	movs	r4, #0
 8002b74:	9400      	str	r4, [sp, #0]
 8002b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = MOT2_ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(MOT2_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002b78:	4829      	ldr	r0, [pc, #164]	; (8002c20 <HAL_TIM_Encoder_MspInit+0xcc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b82:	f002 0201 	and.w	r2, r2, #1
 8002b86:	9200      	str	r2, [sp, #0]
 8002b88:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	9401      	str	r4, [sp, #4]
 8002b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
 8002b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b96:	f002 0201 	and.w	r2, r2, #1
 8002b9a:	9201      	str	r2, [sp, #4]
 8002b9c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	9402      	str	r4, [sp, #8]
 8002ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba2:	f042 0202 	orr.w	r2, r2, #2
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = MOT2_ENCODER_B_Pin;
 8002bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bb8:	2501      	movs	r5, #1
    HAL_GPIO_Init(MOT2_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002bba:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = MOT2_ENCODER_B_Pin;
 8002bbc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bc0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(MOT2_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f7fd febd 	bl	8000940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOT2_ENCODER_A_Pin;
 8002bc6:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(MOT2_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	4816      	ldr	r0, [pc, #88]	; (8002c24 <HAL_TIM_Encoder_MspInit+0xd0>)
    GPIO_InitStruct.Pin = MOT2_ENCODER_A_Pin;
 8002bca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bd2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(MOT2_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = MOT1_ENCODER_A_Pin|MOT1_ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f7fd feb3 	bl	8000940 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002bda:	b00a      	add	sp, #40	; 0x28
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}
  else if(tim_encoderHandle->Instance==TIM5)
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d1fa      	bne.n	8002bda <HAL_TIM_Encoder_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_TIM_Encoder_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	480e      	ldr	r0, [pc, #56]	; (8002c20 <HAL_TIM_Encoder_MspInit+0xcc>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002be8:	2100      	movs	r1, #0
 8002bea:	9103      	str	r1, [sp, #12]
 8002bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bee:	f042 0208 	orr.w	r2, r2, #8
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	f002 0208 	and.w	r2, r2, #8
 8002bfa:	9203      	str	r2, [sp, #12]
 8002bfc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	9104      	str	r1, [sp, #16]
 8002c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	9304      	str	r3, [sp, #16]
 8002c10:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = MOT1_ENCODER_A_Pin|MOT1_ENCODER_B_Pin;
 8002c12:	2303      	movs	r3, #3
 8002c14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c1a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	a905      	add	r1, sp, #20
 8002c1e:	e7da      	b.n	8002bd6 <HAL_TIM_Encoder_MspInit+0x82>
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM3)
 8002c32:	6803      	ldr	r3, [r0, #0]
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <HAL_TIM_Base_MspInit+0x8c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d115      	bne.n	8002c66 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_TIM_Base_MspInit+0x90>)
 8002c3e:	9201      	str	r2, [sp, #4]
 8002c40:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c42:	f041 0102 	orr.w	r1, r1, #2
 8002c46:	6419      	str	r1, [r3, #64]	; 0x40
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	9301      	str	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c50:	201d      	movs	r0, #29
 8002c52:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c56:	f7fd fe05 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c5a:	201d      	movs	r0, #29
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002c5c:	f7fd fe36 	bl	80008cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002c60:	b005      	add	sp, #20
 8002c62:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM10)
 8002c66:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <HAL_TIM_Base_MspInit+0x94>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d111      	bne.n	8002c90 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <HAL_TIM_Base_MspInit+0x90>)
 8002c70:	9202      	str	r2, [sp, #8]
 8002c72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c74:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002c78:	6459      	str	r1, [r3, #68]	; 0x44
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c82:	2019      	movs	r0, #25
 8002c84:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c86:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c88:	f7fd fdec 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c8c:	2019      	movs	r0, #25
 8002c8e:	e7e5      	b.n	8002c5c <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM11)
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_TIM_Base_MspInit+0x98>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d1e4      	bne.n	8002c60 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c96:	2200      	movs	r2, #0
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_TIM_Base_MspInit+0x90>)
 8002c9a:	9203      	str	r2, [sp, #12]
 8002c9c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c9e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002ca2:	6459      	str	r1, [r3, #68]	; 0x44
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002caa:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002cac:	201a      	movs	r0, #26
 8002cae:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002cb0:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002cb2:	f7fd fdd7 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002cb6:	201a      	movs	r0, #26
 8002cb8:	e7d0      	b.n	8002c5c <HAL_TIM_Base_MspInit+0x2c>
 8002cba:	bf00      	nop
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40014400 	.word	0x40014400
 8002cc8:	40014800 	.word	0x40014800

08002ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ccc:	b510      	push	{r4, lr}
 8002cce:	4604      	mov	r4, r0
 8002cd0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd2:	2214      	movs	r2, #20
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	a801      	add	r0, sp, #4
 8002cd8:	f000 f922 	bl	8002f20 <memset>
  if(timHandle->Instance==TIM3)
 8002cdc:	6822      	ldr	r2, [r4, #0]
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <HAL_TIM_MspPostInit+0x48>)
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d114      	bne.n	8002d0e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = MOT1_PWM_Pin|MOT2_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cea:	480c      	ldr	r0, [pc, #48]	; (8002d1c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cee:	f042 0204 	orr.w	r2, r2, #4
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MOT1_PWM_Pin|MOT2_PWM_Pin;
 8002cfe:	23c0      	movs	r3, #192	; 0xc0
 8002d00:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d02:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d08:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	f7fd fe19 	bl	8000940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	bf00      	nop
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020800 	.word	0x40020800

08002d20 <MX_TIM3_Init>:
{
 8002d20:	b510      	push	{r4, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d24:	2210      	movs	r2, #16
 8002d26:	2100      	movs	r1, #0
 8002d28:	a803      	add	r0, sp, #12
 8002d2a:	f000 f8f9 	bl	8002f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2e:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d30:	221c      	movs	r2, #28
 8002d32:	eb0d 0002 	add.w	r0, sp, r2
 8002d36:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d38:	9401      	str	r4, [sp, #4]
 8002d3a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d3c:	f000 f8f0 	bl	8002f20 <memset>
  htim3.Instance = TIM3;
 8002d40:	4821      	ldr	r0, [pc, #132]	; (8002dc8 <MX_TIM3_Init+0xa8>)
  htim3.Init.Prescaler = 35;
 8002d42:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <MX_TIM3_Init+0xac>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d44:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 35;
 8002d46:	2323      	movs	r3, #35	; 0x23
 8002d48:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 99;
 8002d4c:	2363      	movs	r3, #99	; 0x63
 8002d4e:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d50:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d52:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d54:	f7ff f89c 	bl	8001e90 <HAL_TIM_Base_Init>
 8002d58:	b108      	cbz	r0, 8002d5e <MX_TIM3_Init+0x3e>
    Error_Handler();
 8002d5a:	f7ff fe11 	bl	8002980 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d62:	a903      	add	r1, sp, #12
 8002d64:	4818      	ldr	r0, [pc, #96]	; (8002dc8 <MX_TIM3_Init+0xa8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d66:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d68:	f7ff f9aa 	bl	80020c0 <HAL_TIM_ConfigClockSource>
 8002d6c:	b108      	cbz	r0, 8002d72 <MX_TIM3_Init+0x52>
    Error_Handler();
 8002d6e:	f7ff fe07 	bl	8002980 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d72:	4815      	ldr	r0, [pc, #84]	; (8002dc8 <MX_TIM3_Init+0xa8>)
 8002d74:	f7ff f8a6 	bl	8001ec4 <HAL_TIM_PWM_Init>
 8002d78:	b108      	cbz	r0, 8002d7e <MX_TIM3_Init+0x5e>
    Error_Handler();
 8002d7a:	f7ff fe01 	bl	8002980 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7e:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d80:	a901      	add	r1, sp, #4
 8002d82:	4811      	ldr	r0, [pc, #68]	; (8002dc8 <MX_TIM3_Init+0xa8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d84:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d86:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d88:	f7ff fa2e 	bl	80021e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8c:	b108      	cbz	r0, 8002d92 <MX_TIM3_Init+0x72>
    Error_Handler();
 8002d8e:	f7ff fdf7 	bl	8002980 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d92:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d94:	2200      	movs	r2, #0
 8002d96:	a907      	add	r1, sp, #28
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <MX_TIM3_Init+0xa8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d9a:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8002d9c:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d9e:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002da2:	f7ff f921 	bl	8001fe8 <HAL_TIM_PWM_ConfigChannel>
 8002da6:	b108      	cbz	r0, 8002dac <MX_TIM3_Init+0x8c>
    Error_Handler();
 8002da8:	f7ff fdea 	bl	8002980 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dac:	2204      	movs	r2, #4
 8002dae:	a907      	add	r1, sp, #28
 8002db0:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <MX_TIM3_Init+0xa8>)
 8002db2:	f7ff f919 	bl	8001fe8 <HAL_TIM_PWM_ConfigChannel>
 8002db6:	b108      	cbz	r0, 8002dbc <MX_TIM3_Init+0x9c>
    Error_Handler();
 8002db8:	f7ff fde2 	bl	8002980 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <MX_TIM3_Init+0xa8>)
 8002dbe:	f7ff ff85 	bl	8002ccc <HAL_TIM_MspPostInit>
}
 8002dc2:	b00e      	add	sp, #56	; 0x38
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000148 	.word	0x20000148
 8002dcc:	40000400 	.word	0x40000400

08002dd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dd0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002dd2:	480b      	ldr	r0, [pc, #44]	; (8002e00 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MX_USART1_UART_Init+0x34>)
 8002dd6:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 8002dda:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dde:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002de0:	2300      	movs	r3, #0
 8002de2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002de4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002de6:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002de8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dea:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dee:	f7ff fab3 	bl	8002358 <HAL_UART_Init>
 8002df2:	b118      	cbz	r0, 8002dfc <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002df8:	f7ff bdc2 	b.w	8002980 <Error_Handler>
 8002dfc:	bd08      	pop	{r3, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000208 	.word	0x20000208
 8002e04:	40011000 	.word	0x40011000

08002e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0e:	2214      	movs	r2, #20
 8002e10:	2100      	movs	r1, #0
 8002e12:	a803      	add	r0, sp, #12
 8002e14:	f000 f884 	bl	8002f20 <memset>
  if(uartHandle->Instance==USART1)
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_UART_MspInit+0x74>)
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d12b      	bne.n	8002e78 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e20:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002e24:	2400      	movs	r4, #0
 8002e26:	9401      	str	r4, [sp, #4]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2a:	4815      	ldr	r0, [pc, #84]	; (8002e80 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
 8002e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e34:	f002 0210 	and.w	r2, r2, #16
 8002e38:	9201      	str	r2, [sp, #4]
 8002e3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3c:	9402      	str	r4, [sp, #8]
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	9302      	str	r3, [sp, #8]
 8002e4e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002e50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e54:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e60:	2307      	movs	r3, #7
 8002e62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e64:	f7fd fd6c 	bl	8000940 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e68:	2025      	movs	r0, #37	; 0x25
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	f7fd fcf9 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e72:	2025      	movs	r0, #37	; 0x25
 8002e74:	f7fd fd2a 	bl	80008cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e78:	b008      	add	sp, #32
 8002e7a:	bd10      	pop	{r4, pc}
 8002e7c:	40011000 	.word	0x40011000
 8002e80:	40020000 	.word	0x40020000

08002e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ebc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e8a:	e003      	b.n	8002e94 <LoopCopyDataInit>

08002e8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e92:	3104      	adds	r1, #4

08002e94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e94:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e9c:	d3f6      	bcc.n	8002e8c <CopyDataInit>
  ldr  r2, =_sbss
 8002e9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ea0:	e002      	b.n	8002ea8 <LoopFillZerobss>

08002ea2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ea2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ea4:	f842 3b04 	str.w	r3, [r2], #4

08002ea8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002eac:	d3f9      	bcc.n	8002ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eae:	f7ff fdad 	bl	8002a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f000 f811 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb6:	f7ff fd2d 	bl	8002914 <main>
  bx  lr    
 8002eba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ebc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ec0:	08002f80 	.word	0x08002f80
  ldr  r0, =_sdata
 8002ec4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ec8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002ecc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002ed0:	20000248 	.word	0x20000248

08002ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed4:	e7fe      	b.n	8002ed4 <ADC_IRQHandler>
	...

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	4e0d      	ldr	r6, [pc, #52]	; (8002f10 <__libc_init_array+0x38>)
 8002edc:	4c0d      	ldr	r4, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ede:	1ba4      	subs	r4, r4, r6
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	42a5      	cmp	r5, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	4e0b      	ldr	r6, [pc, #44]	; (8002f18 <__libc_init_array+0x40>)
 8002eea:	4c0c      	ldr	r4, [pc, #48]	; (8002f1c <__libc_init_array+0x44>)
 8002eec:	f000 f820 	bl	8002f30 <_init>
 8002ef0:	1ba4      	subs	r4, r4, r6
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	42a5      	cmp	r5, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f00:	4798      	blx	r3
 8002f02:	3501      	adds	r5, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f0a:	4798      	blx	r3
 8002f0c:	3501      	adds	r5, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	08002f78 	.word	0x08002f78
 8002f14:	08002f78 	.word	0x08002f78
 8002f18:	08002f78 	.word	0x08002f78
 8002f1c:	08002f7c 	.word	0x08002f7c

08002f20 <memset>:
 8002f20:	4402      	add	r2, r0
 8002f22:	4603      	mov	r3, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <_init>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr

08002f3c <_fini>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr
